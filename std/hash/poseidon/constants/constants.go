package constants

import (
	"math/big"
)

// Number of full rounds
const RF = 8

// Generated by https://extgit.iaik.tugraz.at/krypto/hadeshash/-/blob/master/code/calc_round_numbers.py
// And rounded up to nearest integer that divides by t in [2, 17]
var RP = []int{56, 57, 56, 60, 60, 63, 64, 63, 60, 66, 60, 65, 70, 60, 64, 68}

// Round constants
var RC [][]*big.Int

// Maximum distance separable matrix
var MDS [][][]*big.Int

func init() {
	constantsSTR := [][]string{t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17}
	mdsSTR := [][][]string{m2, m3, m4, m5, m6, m7, m8, m9, m10, m11, m12, m13, m14, m15, m16, m17}
	size := len(RP)
	RC = make([][]*big.Int, size)
	MDS = make([][][]*big.Int, size)

	for i := 0; i < size; i++ {
		// initialize round constants field elements
		RC[i] = make([]*big.Int, len(constantsSTR[i]))
		for j := 0; j < len(RC[i]); j++ {
			RC[i][j], _ = new(big.Int).SetString(constantsSTR[i][j], 16)
		}
		// initialize MDS matrix field elements
		MDS[i] = make([][]*big.Int, len(mdsSTR[i]))
		for j := 0; j < len(MDS[i]); j++ {
			MDS[i][j] = make([]*big.Int, len(mdsSTR[i][j]))
			for k := 0; k < len(MDS[i][j]); k++ {
				MDS[i][j][k], _ = new(big.Int).SetString(mdsSTR[i][j][k], 16)
			}
		}

	}
}
