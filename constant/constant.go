// Copyright 2020 ConsenSys Software Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by gnark DO NOT EDIT

package constant

import (
	"fmt"
	"github.com/consensys/gnark-crypto/ecc"
	bls12_377 "github.com/consensys/gnark-crypto/ecc/bls12-377/fr"
	bls12_381 "github.com/consensys/gnark-crypto/ecc/bls12-381/fr"
	bls24_315 "github.com/consensys/gnark-crypto/ecc/bls24-315/fr"
	bls24_317 "github.com/consensys/gnark-crypto/ecc/bls24-317/fr"
	bn254 "github.com/consensys/gnark-crypto/ecc/bn254/fr"
	bw6_633 "github.com/consensys/gnark-crypto/ecc/bw6-633/fr"
	bw6_761 "github.com/consensys/gnark-crypto/ecc/bw6-761/fr"
	"github.com/consensys/gnark/frontend"
	"math/big"
)

func HashedBytes(api frontend.API, str []byte) (frontend.Variable, error) {
	field := api.Compiler().Field()
	dst := []byte("string:")
	var res big.Int

	if field.Cmp(ecc.BLS12_377.ScalarField()) == 0 {
		if x, err := bls12_377.Hash(str, dst, 1); err == nil {
			x[0].BigInt(&res)
		} else {
			return nil, err
		}
	} else if field.Cmp(ecc.BLS12_381.ScalarField()) == 0 {
		if x, err := bls12_381.Hash(str, dst, 1); err == nil {
			x[0].BigInt(&res)
		} else {
			return nil, err
		}
	} else if field.Cmp(ecc.BN254.ScalarField()) == 0 {
		if x, err := bn254.Hash(str, dst, 1); err == nil {
			x[0].BigInt(&res)
		} else {
			return nil, err
		}
	} else if field.Cmp(ecc.BW6_761.ScalarField()) == 0 {
		if x, err := bw6_761.Hash(str, dst, 1); err == nil {
			x[0].BigInt(&res)
		} else {
			return nil, err
		}
	} else if field.Cmp(ecc.BLS24_315.ScalarField()) == 0 {
		if x, err := bls24_315.Hash(str, dst, 1); err == nil {
			x[0].BigInt(&res)
		} else {
			return nil, err
		}
	} else if field.Cmp(ecc.BLS24_317.ScalarField()) == 0 {
		if x, err := bls24_317.Hash(str, dst, 1); err == nil {
			x[0].BigInt(&res)
		} else {
			return nil, err
		}
	} else if field.Cmp(ecc.BW6_633.ScalarField()) == 0 {
		if x, err := bw6_633.Hash(str, dst, 1); err == nil {
			x[0].BigInt(&res)
		} else {
			return nil, err
		}
	} else {
		return nil, fmt.Errorf("unknown curve")
	}
	return res, nil
}
