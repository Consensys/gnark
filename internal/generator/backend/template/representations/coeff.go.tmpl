import (
	"github.com/consensys/gnark/constraint"
	"math/big"
	"github.com/consensys/gnark/internal/utils"
	{{ template "import_fr" . }}
)

// CoeffTable ensure we store unique coefficients in the constraint system
type CoeffTable struct {
	Coefficients []fr.Element
	mCoeffs map[fr.Element]uint32 // maps coefficient to coeffID
}

func newCoeffTable(capacity int) CoeffTable {
	r := CoeffTable{
		Coefficients: make([]fr.Element, 5, 5+capacity),
		mCoeffs: make(map[fr.Element]uint32, capacity),
	} 

	r.Coefficients[constraint.CoeffIdZero].SetUint64(0)
	r.Coefficients[constraint.CoeffIdOne].SetOne()
	r.Coefficients[constraint.CoeffIdTwo].SetUint64(2)
	r.Coefficients[constraint.CoeffIdMinusOne].SetInt64(-1)
	r.Coefficients[constraint.CoeffIdMinusTwo].SetInt64(-2)

	return r 

}


func (ct *CoeffTable) MakeTerm(coeff *constraint.Coeff, variableID int) constraint.Term {
	c := (*fr.Element)(coeff[:])
	var cID uint32
	if c.IsZero() {
		cID = constraint.CoeffIdZero
	} else if c.IsOne() {
		cID = constraint.CoeffIdOne
	} else if c.Equal(&two) {
		cID = constraint.CoeffIdTwo
	} else if c.Equal(&minusOne) {
		cID = constraint.CoeffIdMinusOne
	} else if c.Equal(&minusTwo) {
		cID = constraint.CoeffIdMinusTwo
	} else {
		cc := *c
		if id, ok := ct.mCoeffs[cc]; ok {
			cID = id 
		} else {
			cID = uint32(len(ct.Coefficients))
			ct.Coefficients = append(ct.Coefficients, cc)
			ct.mCoeffs[cc] = cID
		}
	}
	
	return constraint.Term{VID: uint32(variableID), CID: cID}
}

// CoeffToString implements constraint.Resolver
func (ct *CoeffTable) CoeffToString(cID int) string {
	return ct.Coefficients[cID].String()
}


var _ constraint.CoeffEngine = &arithEngine{}

var (
	two fr.Element
	minusOne fr.Element
	minusTwo fr.Element
)
	
func init() {
	minusOne.SetOne()
	minusOne.Neg(&minusOne)
	two.SetOne()
	two.Double(&two)
	minusTwo.Neg(&two)
}


// implements constraint.CoeffEngine
type arithEngine struct{}


func (engine *arithEngine) FromInterface(i interface{}) constraint.Coeff {
	var e fr.Element
	if _, err := e.SetInterface(i); err != nil {
		// need to clean that --> some code path are dissimilar
		// for example setting a fr.Element from an fp.Element
		// fails with the above but succeeds through big int... (2-chains)
		b := utils.FromInterface(i) 
		e.SetBigInt(&b)
	}
	var r constraint.Coeff
	copy(r[:], e[:])
	return r
}
func (engine *arithEngine) ToBigInt(c *constraint.Coeff) *big.Int {
	e := (*fr.Element)(c[:])
	r := new(big.Int)
	e.BigInt(r)
	return r

}
func (engine *arithEngine) Mul(a, b *constraint.Coeff) {
	_a := (*fr.Element)(a[:])
	_b := (*fr.Element)(b[:])
	_a.Mul(_a, _b)
}
func (engine *arithEngine) Add(a, b *constraint.Coeff) {
	_a := (*fr.Element)(a[:])
	_b := (*fr.Element)(b[:])
	_a.Add(_a, _b)
}
func (engine *arithEngine) Sub(a, b *constraint.Coeff) {
	_a := (*fr.Element)(a[:])
	_b := (*fr.Element)(b[:])
	_a.Sub(_a, _b)
}
func (engine *arithEngine) Neg(a *constraint.Coeff) {
	e := (*fr.Element)(a[:])
	e.Neg(e)

}
func (engine *arithEngine) Inverse(a *constraint.Coeff) {
	e := (*fr.Element)(a[:])
	e.Inverse(e)
}

func (engine *arithEngine) IsOne(a *constraint.Coeff) bool {
	e := (*fr.Element)(a[:])
	return e.IsOne()
}

func (engine *arithEngine) One() constraint.Coeff {
	e := fr.One()
	var r constraint.Coeff
	copy(r[:], e[:])
	return r
}

func (engine *arithEngine) String(a *constraint.Coeff) string {
	e := (*fr.Element)(a[:])
	return e.String()
}