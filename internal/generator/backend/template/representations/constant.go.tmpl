import (
	"fmt"
    "github.com/consensys/gnark-crypto/ecc"
	{{- range $i := . }}
	    {{- if ne .Curve "tinyfield"}}
            {{toLower .CurveID}} "github.com/consensys/gnark-crypto/ecc/{{toLower .Curve}}/fr"
		{{- end}}
	{{- end}}
    "github.com/consensys/gnark/frontend"
    "math/big"
)

func HashedBytes(api frontend.API, str []byte) (frontend.Variable, error) {
    field := api.Compiler().Field()
    dst := []byte("string:")
    var res big.Int

	{{ $if := "if"}}
    {{- range $i := . }}
		{{- if ne .Curve "tinyfield"}}
	    {{$if}} field.Cmp(ecc.{{.CurveID}}.ScalarField()) == 0 {
			if x, err := {{toLower .CurveID}}.Hash(str, dst, 1); err == nil {
				x[0].BigInt(&res)
			} else {
				return nil, err
            }
	    {{- $if = "} else if" }}
		{{- end}}
	{{- end}}
	} else {
		return nil, fmt.Errorf("unknown curve")
	}
	return res, nil
}