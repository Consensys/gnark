import (
	{{- template "import_fr" .}}
	"fmt"
	"hash"
	"sync"
)

var (
	hashBuilderRegistry = make(map[string]func() hash.Hash)
	hasBuilderLock sync.RWMutex
)

func RegisterHashBuilder(name string, builder func() hash.Hash) {
	hasBuilderLock.Lock()
	defer hasBuilderLock.Unlock()
	hashBuilderRegistry[name] = builder
}

func GetHashBuilder(name string) (func() hash.Hash, error) {
	hasBuilderLock.RLock()
	defer hasBuilderLock.RUnlock()
	builder, ok := hashBuilderRegistry[name]
	if !ok {
		return nil, fmt.Errorf("hash function not found")
	}
	return builder, nil
}


// For testing purposes
type ConstPseudoHash int

func (c ConstPseudoHash) Write(p []byte) (int, error) {
	return len(p), nil
}

func (c ConstPseudoHash) Sum([]byte) []byte {
	var x fr.Element
	x.SetInt64(int64(c))
	res := x.Bytes()
	return res[:]
}

func (c ConstPseudoHash) Reset() {}

func (c ConstPseudoHash) Size() int {
	return fr.Bytes
}

func (c ConstPseudoHash) BlockSize() int {
	return fr.Bytes
}

func init() {

}