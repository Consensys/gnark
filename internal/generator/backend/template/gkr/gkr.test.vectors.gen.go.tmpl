import (
    "encoding/json"
    "fmt"
    "github.com/consensys/bavard"
    fiatshamir "github.com/consensys/gnark-crypto/fiat-shamir"
    "github.com/consensys/gnark/internal/small_rational"
    "github.com/consensys/gnark/internal/small_rational/polynomial"
    "hash"
    "os"
    "path/filepath"
    "reflect"
)

func GenerateVectors() error {
    testDirPath, err := filepath.Abs("../../gkr/test_vectors")
    if err != nil {
        return err
    }

    fmt.Printf("generating GKR test cases: scanning directory %s for test specs\n", testDirPath)

    dirEntries, err := os.ReadDir(testDirPath)
    if err != nil {
        return err
    }
    for _, dirEntry := range dirEntries {
        if !dirEntry.IsDir() {

            if filepath.Ext(dirEntry.Name()) == ".json" {
                path := filepath.Join(testDirPath, dirEntry.Name())
                if !bavard.ShouldGenerate(path) {
                    continue
                }
                fmt.Println("\tprocessing", dirEntry.Name())
                if err = run(path); err != nil {
                    return err
                }
            }
        }
    }

    return nil
}

func run(absPath string) error {
    testCase, err := newTestCase(absPath)
     if err != nil {
         return err
    }

    transcriptSetting := fiatshamir.WithHash(testCase.Hash)

	var proof Proof
    proof, err = Prove(testCase.Circuit, testCase.FullAssignment, transcriptSetting)
    if err != nil {
		return err
    }

    if testCase.Info.Proof, err = toPrintableProof(proof); err != nil {
        return err
    }
    var outBytes []byte
    if outBytes, err = json.MarshalIndent(testCase.Info, "", "\t"); err == nil {
        if err = os.WriteFile(absPath, outBytes, 0); err != nil {
            return err
        }
    } else {
        return err
    }

	testCase, err = newTestCase(absPath)
	if err != nil {
		return err
    }

    err = Verify(testCase.Circuit, testCase.InOutAssignment, proof, transcriptSetting)
	if err != nil {
        return err
    }

    testCase, err = newTestCase(absPath)
    if err != nil {
        return err
    }

    err = Verify(testCase.Circuit, testCase.InOutAssignment, proof, fiatshamir.WithHash(newMessageCounter(2, 0)))
    if err == nil {
	    return fmt.Errorf("bad proof accepted")
    }
	return nil
}

func toPrintableProof(proof Proof) (PrintableProof, error) {
	res := make(PrintableProof, len(proof))

	for i := range proof {

		partialSumPolys := make([][]interface{}, len(proof[i].partialSumPolys))
		for k, partialK := range proof[i].partialSumPolys {
			partialSumPolys[k] = elementSliceToInterfaceSlice(partialK)
		}

		res[i] = PrintableSumcheckProof{
			FinalEvalProof:  elementSliceToInterfaceSlice(proof[i].finalEvalProof),
			PartialSumPolys: partialSumPolys,
		}
	}
	return res, nil
}

{{template "gkrTestVectors" .}}