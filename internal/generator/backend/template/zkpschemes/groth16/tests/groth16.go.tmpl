import (
	{{ template "import_fr" . }}
	{{ template "import_curve" . }}
	{{ template "import_backend_cs" . }}
	{{ template "import_witness" . }}
	{{ template "import_groth16" . }}
	"bytes"
	"reflect"
	"testing"

	"github.com/consensys/gnark/backend"
	"github.com/consensys/gnark/frontend"
	"github.com/consensys/gnark/frontend/cs/r1cs"
)



//--------------------//
//     benches		  //
//--------------------//

type refCircuit struct {
	nbConstraints int 
	X frontend.Variable
	Y frontend.Variable  `gnark:",public"`
}

func (circuit *refCircuit) Define( api frontend.API) error {
	for i := 0; i < circuit.nbConstraints; i++ {
		circuit.X = api.Mul(circuit.X, circuit.X)
	}
	api.AssertIsEqual(circuit.X, circuit.Y)
	return nil 
}

func referenceCircuit() (frontend.CompiledConstraintSystem, frontend.Circuit) {
	const nbConstraints = 40000
	circuit := refCircuit{
		nbConstraints: nbConstraints,
	}
	r1cs, err := frontend.Compile(curve.ID,r1cs.NewBuilder, &circuit)
	if err != nil {
		panic(err)
	}
	
	var good refCircuit
	good.X = 2

	// compute expected Y
	var expectedY fr.Element
	expectedY.SetUint64(2)

	for i := 0; i < nbConstraints; i++ {
		expectedY.Mul(&expectedY, &expectedY)
	}

	good.Y = (expectedY)

	return r1cs, &good
}


func BenchmarkSetup(b *testing.B) {
	r1cs, _ := referenceCircuit()
	
	var pk {{toLower .CurveID}}groth16.ProvingKey
	var vk {{toLower .CurveID}}groth16.VerifyingKey
	b.ResetTimer()

	b.Run("setup", func(b *testing.B) {
		for i := 0; i < b.N; i++ {
			{{toLower .CurveID}}groth16.Setup(r1cs.(*cs.R1CS), &pk, &vk)
		}
	})
}

func BenchmarkProver(b *testing.B) {
	r1cs, _solution := referenceCircuit()
	fullWitness := {{toLower .CurveID}}witness.Witness{}
	_, err := fullWitness.FromAssignment(_solution, tVariable, false)
	if err != nil {
		b.Fatal(err)
	}
	
	var pk {{toLower .CurveID}}groth16.ProvingKey
	{{toLower .CurveID}}groth16.DummySetup(r1cs.(*cs.R1CS), &pk)

	b.ResetTimer()
	b.Run("prover", func(b *testing.B) {
		for i := 0; i < b.N; i++ {
			_, _ = {{toLower .CurveID}}groth16.Prove(r1cs.(*cs.R1CS), &pk, fullWitness, backend.ProverConfig{})
		}
	})
}

func BenchmarkVerifier(b *testing.B) {
	r1cs, _solution := referenceCircuit()
	fullWitness := {{toLower .CurveID}}witness.Witness{}
	_, err := fullWitness.FromAssignment(_solution, tVariable, false)
	if err != nil {
		b.Fatal(err)
	}
	publicWitness := {{toLower .CurveID}}witness.Witness{}
	_, err = publicWitness.FromAssignment(_solution, tVariable, true)
	if err != nil {
		b.Fatal(err)
	}
	
	var pk {{toLower .CurveID}}groth16.ProvingKey
	var vk {{toLower .CurveID}}groth16.VerifyingKey
	{{toLower .CurveID}}groth16.Setup(r1cs.(*cs.R1CS), &pk, &vk)
	proof, err := {{toLower .CurveID}}groth16.Prove(r1cs.(*cs.R1CS), &pk, fullWitness,backend.ProverConfig{})
	if err != nil {
		panic(err)
	}

	b.ResetTimer()
	b.Run("verifier", func(b *testing.B) {
		for i := 0; i < b.N; i++ {
			_ = {{toLower .CurveID}}groth16.Verify(proof, &vk, publicWitness)
		}
	})
}



func BenchmarkProofSerialization(b *testing.B) {
	r1cs, _solution := referenceCircuit()
	fullWitness := {{toLower .CurveID}}witness.Witness{}
	_, err := fullWitness.FromAssignment(_solution,tVariable,  false)
	if err != nil {
		b.Fatal(err)
	}
	
	var pk {{toLower .CurveID}}groth16.ProvingKey
	var vk {{toLower .CurveID}}groth16.VerifyingKey
	{{toLower .CurveID}}groth16.Setup(r1cs.(*cs.R1CS), &pk, &vk)
	proof, err := {{toLower .CurveID}}groth16.Prove(r1cs.(*cs.R1CS), &pk, fullWitness,backend.ProverConfig{})
	if err != nil {
		panic(err)
	}

	b.ReportAllocs()

	{{ $base := toLower .CurveID }}
	
	{{ template "benchBinarySerialization" dict "Type" (print $base "groth16.Proof") "Name" "proof" }}


}

{{ define "benchBinarySerialization" }}
	// ---------------------------------------------------------------------------------------------
	// {{$.Type}} binary serialization
	b.Run("{{$.Name}}: binary serialization ({{$.Type}})", func(b *testing.B) {
		b.ResetTimer()
		for i := 0; i < b.N; i++ {
			var buf bytes.Buffer
			_, _ = {{- $.Name}}.WriteTo(&buf)
		}
	})
	b.Run("{{$.Name}}: binary deserialization ({{$.Type}})", func(b *testing.B) {
		var buf bytes.Buffer
		_, _ = {{$.Name}}.WriteTo(&buf)
		var {{ $.Name}}Reconstructed {{$.Type}}
		b.ResetTimer()
		for i := 0; i < b.N; i++ {
			buf := bytes.NewBuffer(buf.Bytes())
			_, _ = {{- $.Name}}Reconstructed.ReadFrom(buf)
		}
	})
	{
		var buf bytes.Buffer
		_, _ = {{$.Name}}.WriteTo(&buf)
	}

	// ---------------------------------------------------------------------------------------------
	// {{$.Type}} binary serialization (uncompressed)
	b.Run("{{$.Name}}: binary raw serialization ({{$.Type}})", func(b *testing.B) {
		b.ResetTimer()
		for i := 0; i < b.N; i++ {
			var buf bytes.Buffer
			_, _ = {{- $.Name}}.WriteRawTo(&buf)
		}
	})
	b.Run("{{$.Name}}: binary raw deserialization ({{$.Type}})", func(b *testing.B) {
		var buf bytes.Buffer
		_, _ = {{$.Name}}.WriteRawTo(&buf)
		var {{ $.Name}}Reconstructed {{$.Type}}
		b.ResetTimer()
		for i := 0; i < b.N; i++ {
			buf := bytes.NewBuffer(buf.Bytes())
			_, _ = {{- $.Name}}Reconstructed.ReadFrom(buf)
		}
	})
	{
		var buf bytes.Buffer
		_, _ = {{$.Name}}.WriteRawTo(&buf)
	}

{{ end }}





func BenchmarkProvingKeySerialization(b *testing.B) {
	r1cs, _ := referenceCircuit()
	
	var pk {{toLower .CurveID}}groth16.ProvingKey
	{{toLower .CurveID}}groth16.DummySetup(r1cs.(*cs.R1CS), &pk)

	var buf bytes.Buffer 
	// grow the buffer once
	pk.WriteTo(&buf)

	b.ResetTimer()
	b.Run("pk_serialize_compressed", func(b *testing.B) {
		for i := 0; i < b.N; i++ {
			buf.Reset()
			pk.WriteTo(&buf)
		}
	})

	compressedBytes := buf.Bytes()
	b.ResetTimer()
	b.Run("pk_deserialize_compressed_safe", func(b *testing.B) {
		for i := 0; i < b.N; i++ {
			pk.ReadFrom(bytes.NewReader(compressedBytes))
		}
	})

	b.ResetTimer()
	b.Run("pk_deserialize_compressed_unsafe", func(b *testing.B) {
		for i := 0; i < b.N; i++ {
			pk.UnsafeReadFrom(bytes.NewReader(compressedBytes))
		}
	})

	b.ResetTimer()
	b.Run("pk_serialize_raw", func(b *testing.B) {
		for i := 0; i < b.N; i++ {
			buf.Reset()
			pk.WriteRawTo(&buf)
		}
	})

	rawBytes := buf.Bytes()
	b.ResetTimer()
	b.Run("pk_deserialize_raw_safe", func(b *testing.B) {
		for i := 0; i < b.N; i++ {
			pk.ReadFrom(bytes.NewReader(rawBytes))
		}
	})

	b.ResetTimer()
	b.Run("pk_deserialize_raw_unsafe", func(b *testing.B) {
		for i := 0; i < b.N; i++ {
			pk.UnsafeReadFrom(bytes.NewReader(rawBytes))
		}
	})
}


var tVariable reflect.Type

func init() {
	tVariable = reflect.ValueOf(struct{ A frontend.Variable }{}).FieldByName("A").Type()
}
