import (
	{{ template "import_fr" . }}
	{{ template "import_curve" . }}
	{{ template "import_backend_cs" . }}
	{{ template "import_witness" . }}
	{{ template "import_plonk" . }}
	{{ template "import_kzg" . }}
	"bytes"
	"math/big"
	"testing"
	"reflect"

	"github.com/consensys/gnark-crypto/ecc"
	"github.com/consensys/gnark/frontend"
	"github.com/consensys/gnark/backend"
	"github.com/consensys/gnark/frontend/cs/scs"

)

{{/* TODO this is duplicate with groth16 tests tempalte */}}


//--------------------//
//     benches		  //
//--------------------//

type refCircuit struct {
	nbConstraints int 
	X frontend.Variable
	Y frontend.Variable  `gnark:",public"`
}

func (circuit *refCircuit) Define( api frontend.API) error {
	for i := 0; i < circuit.nbConstraints; i++ {
		circuit.X = api.Mul(circuit.X, circuit.X)
	}
	api.AssertIsEqual(circuit.X, circuit.Y)
	return nil 
}

func referenceCircuit() (frontend.CompiledConstraintSystem, frontend.Circuit, *kzg.SRS) {
	const nbConstraints = 40000
	circuit := refCircuit{
		nbConstraints: nbConstraints,
	}
	ccs, err := frontend.Compile(curve.ID, scs.NewBuilder, &circuit)
	if err != nil {
		panic(err)
	}
	
	var good refCircuit
	good.X = (2)

	// compute expected Y
	var expectedY fr.Element
	expectedY.SetUint64(2)

	for i := 0; i < nbConstraints; i++ {
		expectedY.Mul(&expectedY, &expectedY)
	}

	good.Y = (expectedY)
	srs, err := kzg.NewSRS(ecc.NextPowerOfTwo(nbConstraints) + 3, new(big.Int).SetUint64(42))
	if err != nil {
		panic(err)
	}

	return ccs, &good, srs
}

func BenchmarkSetup(b *testing.B) {
	ccs, _, srs := referenceCircuit()
	
	b.ResetTimer()

	b.Run("setup", func(b *testing.B) {
		for i := 0; i < b.N; i++ {
			_, _, _ = {{toLower .CurveID}}plonk.Setup(ccs.(*cs.SparseR1CS), srs)
		}
	})
}

func BenchmarkProver(b *testing.B) {
	ccs, _solution, srs := referenceCircuit()
	fullWitness := {{toLower .CurveID}}witness.Witness{}
	_, err := fullWitness.FromAssignment(_solution, tVariable, false)
	if err != nil {
		b.Fatal(err)
	}
	
	pk, _, err := {{toLower .CurveID}}plonk.Setup(ccs.(*cs.SparseR1CS), srs)
	if err != nil {
		b.Fatal(err)
	}

	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		_, err = {{toLower .CurveID}}plonk.Prove(ccs.(*cs.SparseR1CS), pk, fullWitness,backend.ProverConfig{})
		if err != nil {
			b.Fatal(err)
		}
	}
}

func BenchmarkVerifier(b *testing.B) {
	ccs, _solution, srs := referenceCircuit()
	fullWitness := {{toLower .CurveID}}witness.Witness{}
	_, err := fullWitness.FromAssignment(_solution, tVariable, false)
	if err != nil {
		b.Fatal(err)
	}
	publicWitness := {{toLower .CurveID}}witness.Witness{}
	_, err = publicWitness.FromAssignment(_solution, tVariable, true)
	if err != nil {
		b.Fatal(err)
	}
	
	pk, vk, err := {{toLower .CurveID}}plonk.Setup(ccs.(*cs.SparseR1CS), srs)
	if err != nil {
		b.Fatal(err)
	}

	proof, err := {{toLower .CurveID}}plonk.Prove(ccs.(*cs.SparseR1CS), pk, fullWitness, backend.ProverConfig{})
	if err != nil {
		panic(err)
	}

	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		_ = {{toLower .CurveID}}plonk.Verify(proof, vk, publicWitness)
	}
}



func BenchmarkSerialization(b *testing.B) {
	ccs, _solution, srs := referenceCircuit()
	fullWitness := {{toLower .CurveID}}witness.Witness{}
	_, err := fullWitness.FromAssignment(_solution, tVariable, false)
	if err != nil {
		b.Fatal(err)
	}
	
	pk, _, err := {{toLower .CurveID}}plonk.Setup(ccs.(*cs.SparseR1CS), srs)
	if err != nil {
		b.Fatal(err)
	}

	proof, err := {{toLower .CurveID}}plonk.Prove(ccs.(*cs.SparseR1CS), pk, fullWitness, backend.ProverConfig{} )
	if err != nil {
		b.Fatal(err)
	}

	b.ReportAllocs()

	{{ $base := toLower .CurveID }}
	
	{{ template "benchBinarySerialization" dict "Type" (print $base "plonk.ProvingKey") "Name" "pk" }}
	{{ template "benchBinarySerialization" dict "Type" (print $base "plonk.Proof") "Name" "proof" }}


}

{{ define "benchBinarySerialization" }}
	// ---------------------------------------------------------------------------------------------
	// {{$.Type}} binary serialization
	b.Run("{{$.Name}}: binary serialization ({{$.Type}})", func(b *testing.B) {
		b.ResetTimer()
		for i := 0; i < b.N; i++ {
			var buf bytes.Buffer
			_, _ = {{- $.Name}}.WriteTo(&buf)
		}
	})
	b.Run("{{$.Name}}: binary deserialization ({{$.Type}})", func(b *testing.B) {
		var buf bytes.Buffer
		_, _ = {{$.Name}}.WriteTo(&buf)
		var {{ $.Name}}Reconstructed {{$.Type}}
		b.ResetTimer()
		for i := 0; i < b.N; i++ {
			buf := bytes.NewBuffer(buf.Bytes())
			_, _ = {{- $.Name}}Reconstructed.ReadFrom(buf)
		}
	})
	{
		var buf bytes.Buffer
		_, _ = {{$.Name}}.WriteTo(&buf)
	}

{{ end }}






var tVariable reflect.Type

func init() {
	tVariable = reflect.ValueOf(struct{ A frontend.Variable }{}).FieldByName("A").Type()
}
