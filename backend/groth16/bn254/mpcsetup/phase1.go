// Copyright 2020-2024 Consensys Software Inc.
// Licensed under the Apache License, Version 2.0. See the LICENSE file for details.

// Code generated by gnark DO NOT EDIT

package mpcsetup

import (
	"bytes"
	"crypto/sha256"
	"errors"
	"fmt"
	curve "github.com/consensys/gnark-crypto/ecc/bn254"
	"github.com/consensys/gnark-crypto/ecc/bn254/fr"
	"math/big"
)

// SrsCommons are the circuit-independent components of the Groth16 SRS,
// computed by the first phase.
// in all that follows, N is the domain size
type SrsCommons struct {
	G1 struct {
		Tau      []curve.G1Affine // {[τ⁰]₁, [τ¹]₁, [τ²]₁, …, [τ²ᴺ⁻²]₁}
		AlphaTau []curve.G1Affine // {α[τ⁰]₁, α[τ¹]₁, α[τ²]₁, …, α[τᴺ⁻¹]₁}
		BetaTau  []curve.G1Affine // {β[τ⁰]₁, β[τ¹]₁, β[τ²]₁, …, β[τᴺ⁻¹]₁}
	}
	G2 struct {
		Tau  []curve.G2Affine // {[τ⁰]₂, [τ¹]₂, [τ²]₂, …, [τᴺ⁻¹]₂}
		Beta curve.G2Affine   // [β]₂
	}
}

// Phase1 in line with Phase1 of the MPC described in
// https://eprint.iacr.org/2017/1050.pdf
//
// Also known as "Powers of Tau"
type Phase1 struct {
	proofs struct { // "main" contributions
		Tau, Alpha, Beta valueUpdate
	}
	parameters SrsCommons
	Challenge  []byte // Hash of the transcript PRIOR to this participant
}

// Contribute contributes randomness to the Phase1 object. This mutates Phase1.
// p is trusted to be well-formed. The ReadFrom function performs such basic sanity checks.
func (p *Phase1) Contribute() {
	p.Challenge = p.hash()

	// Generate main value updates
	var (
		tauContrib, alphaContrib, betaContrib fr.Element
	)
	p.proofs.Tau, tauContrib = updateValue(&p.parameters.G1.Tau[1], p.Challenge, 1)
	p.proofs.Alpha, alphaContrib = updateValue(&p.parameters.G1.AlphaTau[0], p.Challenge, 2)
	p.proofs.Beta, betaContrib = updateValue(&p.parameters.G1.BetaTau[0], p.Challenge, 3)

	p.parameters.update(&tauContrib, &alphaContrib, &betaContrib, true)
}

// setZero instantiates the parameters, and sets all contributions to zero
func (c *SrsCommons) setZero(N uint64) {
	c.G1.Tau = make([]curve.G1Affine, 2*N-2)
	c.G2.Tau = make([]curve.G2Affine, N)
	c.G1.AlphaTau = make([]curve.G1Affine, N)
	c.G1.BetaTau = make([]curve.G1Affine, N)
	_, _, c.G1.Tau[0], c.G2.Tau[0] = curve.Generators()
}

// setOne instantiates the parameters, and sets all contributions to one
func (c *SrsCommons) setOne(N uint64) {
	c.setZero(N)
	for i := range c.G1.Tau {
		c.G1.Tau[i] = c.G1.Tau[0]
	}
	for i := range c.G1.AlphaTau {
		c.G1.AlphaTau[i] = c.G1.AlphaTau[0]
		c.G1.BetaTau[i] = c.G1.AlphaTau[0]
		c.G2.Tau[i] = c.G2.Tau[0]
	}
	c.G2.Beta = c.G2.Tau[0]
}

// from the fourth argument on this just gives an opportunity to avoid recomputing some scalar multiplications
func (c *SrsCommons) update(tauUpdate, alphaUpdate, betaUpdate *fr.Element, principalG1sPrecomputed bool) {
	i0 := 0
	if principalG1sPrecomputed {
		i0 = 1
	}

	// TODO @gbotrel working with jacobian points here will help with perf.

	tauUpdates := powers(tauUpdate, len(c.G1.Tau))
	// saving 3 exactly scalar muls among millions. Not a significant gain but might as well.
	scaleG1InPlace(c.G1.Tau[i0+1:], tauUpdates[i0+1:]) // first element remains 1. second element may have been precomputed.
	scaleG2InPlace(c.G2.Tau[1:], tauUpdates[1:])

	alphaUpdates := make([]fr.Element, len(c.G1.AlphaTau))
	alphaUpdates[0].Set(alphaUpdate)
	for i := i0; i < len(alphaUpdates); i++ {
		alphaUpdates[i].Mul(&tauUpdates[i], &alphaUpdates[1])
	}
	scaleG1InPlace(c.G1.AlphaTau[i0:], alphaUpdates[i0:]) // first element may have been precomputed

	betaUpdates := make([]fr.Element, len(c.G1.BetaTau))
	betaUpdates[0].Set(betaUpdate)
	for i := i0; i < len(betaUpdates); i++ {
		alphaUpdates[i].Mul(&tauUpdates[i], &betaUpdates[1])
	}
	scaleG1InPlace(c.G1.BetaTau[i0:], betaUpdates[i0:])

	var betaUpdateI big.Int
	betaUpdate.SetBigInt(&betaUpdateI)
	c.G2.Beta.ScalarMultiplication(&c.G2.Beta, &betaUpdateI)
}

// Seal performs the final contribution and outputs the final parameters.
// No randomization is performed at this step.
// A verifier should simply re-run this and check
// that it produces the same values.
// The inner workings of the random beacon are out of scope.
// WARNING: Seal modifies p, just as Contribute does.
// The result will be an INVALID Phase1 object, since no proof of correctness is produced.
func (p *Phase1) Seal(beaconChallenge []byte) SrsCommons {
	var (
		bb  bytes.Buffer
		err error
	)
	bb.Write(p.hash())
	bb.Write(beaconChallenge)

	newContribs := make([]fr.Element, 3)
	// cryptographically unlikely for this to be run more than once
	for newContribs[0].IsZero() || newContribs[1].IsZero() || newContribs[2].IsZero() {
		if newContribs, err = fr.Hash(bb.Bytes(), []byte("Groth16 SRS generation ceremony - Phase 1 Final Step"), 3); err != nil {
			panic(err)
		}
		bb.WriteByte('=') // padding just so that the hash is different next time
	}

	p.parameters.update(&newContribs[0], &newContribs[1], &newContribs[2], false)

	return p.parameters
}

func VerifyPhase1(c0, c1 *Phase1, c ...*Phase1) error {
	contribs := append([]*Phase1{c0, c1}, c...)
	for i := 0; i < len(contribs)-1; i++ {
		if err := contribs[i].Verify(contribs[i+1]); err != nil {
			return err
		}
	}
	return nil
}

// Verify assumes previous is correct
func (p *Phase1) Verify(next *Phase1) error {

	challenge := p.hash()
	if len(next.Challenge) != 0 && !bytes.Equal(next.Challenge, challenge) {
		return errors.New("the challenge does not match the previous phase's hash")
	}
	next.Challenge = challenge

	// the internal consistency of the vector sizes in next is assumed
	// so is its well-formedness i.e. Tau[0] = 1
	// it remains to check it is consistent with p
	N := len(next.parameters.G2.Tau)
	if N != len(p.parameters.G2.Tau) {
		return errors.New("domain size mismatch")
	}

	// verify updates to τ, α, β
	if err := next.proofs.Tau.verify(pair{p.parameters.G1.Tau[1], nil}, pair{next.parameters.G1.Tau[1], nil}, challenge, 1); err != nil {
		return fmt.Errorf("failed to verify contribution to τ: %w", err)
	}
	if err := next.proofs.Alpha.verify(pair{p.parameters.G1.AlphaTau[0], nil}, pair{p.parameters.G1.AlphaTau[0], nil}, challenge, 2); err != nil {
		return fmt.Errorf("failed to verify contribution to α: %w", err)
	}
	if err := next.proofs.Beta.verify(pair{p.parameters.G1.BetaTau[0], &p.parameters.G2.Beta}, pair{next.parameters.G1.BetaTau[0], &next.parameters.G2.Beta}, challenge, 3); err != nil {
		return fmt.Errorf("failed to verify contribution to β: %w", err)
	}

	if !areInSubGroupG1(next.parameters.G1.Tau[2:]) || !areInSubGroupG1(next.parameters.G1.BetaTau[1:]) || !areInSubGroupG1(next.parameters.G1.AlphaTau[1:]) {
		return errors.New("derived values 𝔾₁ subgroup check failed")
	}
	if !areInSubGroupG2(next.parameters.G2.Tau[2:]) {
		return errors.New("derived values 𝔾₂ subgroup check failed")
	}

	// lemma: let R be an integral domain and
	// F = ∑ fᵢⱼ XⁱYʲ     F' = ∑ f'ᵢⱼ XⁱYʲ
	// G = ∑ gᵢ Zⁱ        G' = ∑ g'ᵢ Zⁱ
	// polynomials in R[X,Y,Z].
	// if F/F' = G/G'
	// then F/F' = G/G' ∈ FracR
	//
	// view our polynomials in FracR[X,Y,Z]
	// By multiplying out the polynomials we get
	// FG' = F'G ⇒ ∑ fᵢⱼg'ₖ XᶦYʲZᵏ = ∑ f'ᵢⱼgₖₗ XᶦYʲZᵏ
	// pick i0 ,j0 , k0 where f'ᵢ₀ⱼ₀, g'ₖ₀ ≠ 0
	// let x ≔ fᵢ₀ⱼ₀/f'ᵢ₀ⱼ₀ = gₖ₀/g'ₖ₀
	// now for any i,j: fᵢⱼg'ₖ₀ = f'ᵢⱼgₖ₀ ⇒
	// fᵢⱼ = x f'ᵢⱼ
	// likewise for any i: fᵢ₀ⱼ₀g'ᵢ = f'ᵢ₀ⱼ₀gᵢ ⇒
	// gᵢ = x g'ᵢ

	// now we use this to check that:
	//    1. aᵢ ≔ G1.Tau[i]      = [τⁱ]₁
	//    2. bᵢ ≔ G2.Tau[i]      = [τⁱ]₂
	//    3. cᵢ ≔ G1.AlphaTau[i] = [ατⁱ]₁
	//    4. dᵢ ≔ G1.BetaTau[i]  = [βτⁱ]₁

	// construct the polynomials
	// F  ≔ a₀ + a₁X + ... + a₂ₙ₋₃X²ᴺ⁻³ + c₀Y + c₁XY + ... + cₙ₋₂Xᴺ⁻²Y + d₀Y² + d₁XY² + ... + dₙ₋₂Xᴺ⁻²Y²
	// F' ≔ a₁ + a₂X + ... + a₂ₙ₋₂X²ᴺ⁻³ + c₁Y + c₂XY + ... + cₙ₋₁Xᴺ⁻²Y + d₁Y² + d₂XY² + ... + dₙ₋₁Xᴺ⁻²Y²
	// G  ≔ b₀ + b₁Z + ... + bₙ₋₂Zᴺ⁻²
	// G' ≔ b₁ + b₂Z + ... + bₙ₋₁Zᴺ⁻²

	// if F/F' = G/G' we get F/F' = G/G' = a₀/a₁ = 1/τ, which yields:
	// for 0 ≤ i ≤ N-2:  bᵢ = bᵢ₊₁/τ, cᵢ = cᵢ₊₁/τ, dᵢ = dᵢ₊₁/τ
	// for 0 ≤ i ≤ 2N-3: aᵢ = aᵢ₊₁/τ

	// from previous checks we already know:
	//    1. a₀ = 1
	//    2. b₀ = 1
	//    3. c₀ = α
	//    4. d₀ = β

	ends := partialSums(len(next.parameters.G1.Tau), len(next.parameters.G1.AlphaTau), len(next.parameters.G1.BetaTau))

	g1s := make([]curve.G1Affine, 0, ends[len(ends)-1])
	g1s = append(g1s, next.parameters.G1.Tau...)
	g1s = append(g1s, next.parameters.G1.AlphaTau...)
	g1s = append(g1s, next.parameters.G1.BetaTau...)

	g1Num, g1Denom := linearCombinationsG1(g1s, bivariateRandomMonomials(ends...), ends)
	g2Num, g2Denom := linearCombinationsG2(next.parameters.G2.Tau, linearCombCoeffs(len(next.parameters.G2.Tau)))

	if !sameRatioUnsafe(g1Num, g1Denom, g2Num, g2Denom) {
		return errors.New("value update check failed")
	}

	return nil
}

func (p *Phase1) hash() []byte {
	if len(p.Challenge) == 0 {
		panic("challenge field missing")
	}
	sha := sha256.New()
	p.WriteTo(sha)
	sha.Write(p.Challenge)
	return sha.Sum(nil)
}
