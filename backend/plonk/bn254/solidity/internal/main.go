package main

import (
	"fmt"
	"os"

	"github.com/consensys/gnark-crypto/ecc"
	"github.com/consensys/gnark-crypto/ecc/bn254/fr"
	"github.com/consensys/gnark/backend/plonk"
	bn254plonk "github.com/consensys/gnark/backend/plonk/bn254"
	"github.com/consensys/gnark/backend/plonk/bn254/solidity/tmpl"
	"github.com/consensys/gnark/frontend"
	"github.com/consensys/gnark/frontend/cs/scs"
	"github.com/consensys/gnark/test"
)

func checkError(err error) {
	if err != nil {
		fmt.Println(err)
		os.Exit(-1)
	}
}

type commitmentCircuit struct {
	Public [3]frontend.Variable `gnark:",public"`
	X      [3]frontend.Variable
}

func (c *commitmentCircuit) Define(api frontend.API) error {

	committer, ok := api.(frontend.Committer)
	if !ok {
		return fmt.Errorf("type %T doesn't impl the Committer interface", api)
	}
	c1, err := committer.Commit(c.X[:]...)
	if err != nil {
		return err
	}
	c2, err := committer.Commit(c.X[:]...)
	if err != nil {
		return err
	}
	// c3, err := committer.Commit(c.X[:]...)
	// if err != nil {
	// 	return err
	// }

	for i := 0; i < 3; i++ {
		api.AssertIsDifferent(c1, c.X[i])
		api.AssertIsDifferent(c2, c.X[i])
		// api.AssertIsDifferent(c3, c.X[i])
		for _, p := range c.Public {
			api.AssertIsDifferent(p, 0)
		}
	}
	return err
}

func getVkProofCommitmentCircuit() (bn254plonk.Proof, bn254plonk.VerifyingKey, []fr.Element) {

	var circuit commitmentCircuit
	ccs, err := frontend.Compile(ecc.BN254.ScalarField(), scs.NewBuilder, &circuit)
	checkError(err)

	var witness commitmentCircuit
	witness.X = [3]frontend.Variable{3, 4, 5}
	witness.Public = [3]frontend.Variable{6, 7, 8}
	witnessFull, err := frontend.NewWitness(&witness, ecc.BN254.ScalarField())
	checkError(err)
	witnessPublic, err := witnessFull.Public()
	checkError(err)

	srs, err := test.NewKZGSRS(ccs)
	checkError(err)

	pk, vk, err := plonk.Setup(ccs, srs)
	checkError(err)

	proof, err := plonk.Prove(ccs, pk, witnessFull)
	checkError(err)

	err = plonk.Verify(proof, vk, witnessPublic)
	checkError(err)

	tvk := vk.(*bn254plonk.VerifyingKey)
	tproof := proof.(*bn254plonk.Proof)

	ipi := witnessPublic.Vector()
	pi := ipi.(fr.Vector)

	return *tproof, *tvk, pi
}

type vanillaPlonk struct {
	X frontend.Variable
	Y frontend.Variable `gnark:",public"`
}

func (circuit *vanillaPlonk) Define(api frontend.API) error {
	a := api.Mul(circuit.X, circuit.X, circuit.X, circuit.X, circuit.X)
	api.AssertIsEqual(a, circuit.Y)
	return nil
}

func getVkProofVanillaPlonkCircuit() (bn254plonk.Proof, bn254plonk.VerifyingKey, []fr.Element) {

	var circuit vanillaPlonk
	ccs, err := frontend.Compile(ecc.BN254.ScalarField(), scs.NewBuilder, &circuit)
	checkError(err)

	var witness vanillaPlonk
	witness.X = 2
	witness.Y = 32
	witnessFull, err := frontend.NewWitness(&witness, ecc.BN254.ScalarField())
	checkError(err)
	witnessPublic, err := witnessFull.Public()
	checkError(err)

	srs, err := test.NewKZGSRS(ccs)
	checkError(err)

	pk, vk, err := plonk.Setup(ccs, srs)
	checkError(err)

	proof, err := plonk.Prove(ccs, pk, witnessFull)
	checkError(err)

	err = plonk.Verify(proof, vk, witnessPublic)
	checkError(err)

	tvk := vk.(*bn254plonk.VerifyingKey)
	tproof := proof.(*bn254plonk.Proof)

	ipi := witnessPublic.Vector()
	pi := ipi.(fr.Vector)

	return *tproof, *tvk, pi
}

func writeData(vk bn254plonk.VerifyingKey, proof bn254plonk.Proof) error {

	fproof, err := os.Create("../proof")
	if err != nil {
		return err
	}
	_, err = proof.WriteRawTo(fproof)
	if err != nil {
		return err
	}

	fvk, err := os.Create("../vk")
	if err != nil {
		return err
	}
	_, err = vk.WriteRawTo(fvk)
	if err != nil {
		return err
	}

	fproof.Close()

	return nil
}

//go:generate go run main.go
func main() {

	proof, vk, pi := getVkProofCommitmentCircuit()
	// proof, vk, pi := getVkProofVanillaPlonkCircuit()

	err := writeData(vk, proof)
	checkError(err)

	err = tmpl.GenerateVerifier(vk, proof, pi, "../contracts")
	// err = tmpl.GenerateVerifierBis(vk, proof, pi, "../contracts")
	checkError(err)
	// printvk(vk)

}

// func main() {

// 	ss := []byte{0x1f, 0xc5, 0x94, 0x69, 0x70, 0x8b, 0x8c, 0x50, 0x14, 0x52, 0xef, 0x86, 0xaa, 0x9c, 0x4f, 0xe3, 0xc2, 0x81, 0x99, 0xb3, 0xbf, 0x3f, 0x94, 0xde, 0xdb, 0x6b, 0x3c, 0x46, 0xdf, 0x5c, 0x73, 0x43, 0x2e, 0xf1, 0x7a, 0xc4, 0xd3, 0x97, 0x7a, 0xeb, 0xea, 0x14, 0x32, 0xab, 0xc8, 0x12, 0xdf, 0xb4, 0x5f, 0x8a, 0x51, 0x55, 0x03, 0x8e, 0x26, 0xfa, 0x58, 0x4b, 0xc7, 0x92, 0x53, 0x31, 0x89, 0xe8, 0x03, 0xac, 0xd8, 0x2d, 0xf2, 0x7e, 0x3a, 0xc0, 0xe3, 0xe4, 0x36, 0xbb, 0xb2, 0xae, 0x4b, 0xbc, 0x9f, 0xf8, 0xca, 0xcc, 0xb0, 0x35, 0xb9, 0xee, 0x4a, 0xfc, 0x97, 0x1d, 0x26, 0xcc, 0x75, 0xd4, 0x2f, 0x36, 0x24, 0x5b, 0xc1, 0x9a, 0x88, 0x1d, 0x2a, 0xf1, 0xc4, 0xbe, 0x1b, 0xc7, 0xe8, 0x92, 0x4b, 0x91, 0xaa, 0x9e, 0x38, 0xe7, 0x00, 0xbd, 0x86, 0xd3, 0x2b, 0x71, 0xe6, 0xd3, 0x52, 0x18, 0x23, 0x92, 0xcf, 0x24, 0x1d, 0xfb, 0x92, 0x97, 0xcb, 0xbd, 0xfc, 0x83, 0xc1, 0xc3, 0x9e, 0xe1, 0xc9, 0x4c, 0xba, 0x03, 0xc7, 0x80, 0x5b, 0x96, 0x3d, 0x19, 0x8d, 0xb4, 0xab, 0xb3, 0xdb, 0xd4, 0x07, 0x60, 0x29, 0x89, 0x36, 0x8a, 0x95, 0x2b, 0xc5, 0x8e, 0xf8, 0xbe, 0xc6, 0x91, 0x90, 0x0d, 0x25, 0xaf, 0x83, 0x80, 0xbf, 0x57, 0xb8, 0xc7, 0x1c, 0xf9, 0x77, 0xd1, 0x29, 0x33, 0xfc, 0xbd, 0x1a, 0x3f, 0x11, 0xe7, 0x4d, 0xb8, 0x48, 0x8f, 0xb8, 0xff, 0x53, 0xfa, 0x2b, 0xb1, 0x57, 0x51, 0x60, 0x16, 0x2d, 0x8d, 0x96, 0xb8, 0x2a, 0xfb, 0x95, 0xfc, 0xcb, 0x4f, 0x1c, 0x39, 0x74, 0xd9, 0x1a, 0x31, 0xa5, 0x05, 0x69, 0x32, 0x67, 0x82, 0x24, 0x75, 0x21, 0x18, 0x2c, 0xbb, 0x6b, 0x3d, 0x56, 0x94, 0x18, 0xfb, 0xb3, 0xb9, 0x5a, 0xe6, 0x97, 0x84, 0xa8, 0xe3, 0xfa, 0xe7, 0xc1, 0x4c, 0x25, 0x1f, 0xe7, 0x2f, 0xa4, 0xbb, 0x81, 0x76, 0xa7, 0x9c, 0x44, 0x03, 0xcf, 0xc2, 0x18, 0x7a, 0x65, 0x5c, 0x7f, 0x25, 0x08, 0xf2, 0x99, 0x70, 0x5a, 0x4e, 0x18, 0x8b, 0x08, 0xb1, 0x35, 0xa4, 0x07, 0x7c, 0x1d, 0xc3, 0x95, 0x1a, 0x0a, 0x1b, 0x46, 0x40, 0x33, 0x4e, 0x3e, 0x24, 0x0d, 0xd7, 0x65, 0x79, 0xe8, 0x39, 0x2d, 0x6d, 0x80, 0xa0, 0xe6, 0xf9, 0x63, 0xd4, 0x1b, 0x7d, 0x0c, 0x4c, 0x1a, 0xec, 0x1b, 0xec, 0xdc, 0xf4, 0x0a, 0x51, 0x20, 0x68, 0xc7, 0x92, 0x25, 0x90, 0xce, 0xe2, 0xc4, 0x7e, 0xe5, 0xa4, 0x06, 0x68, 0x97, 0xd7, 0xed, 0x0a, 0x26, 0x1d, 0xaa, 0x81, 0x6d, 0x6b, 0x29, 0x55, 0x2a, 0x8e, 0x89, 0xa4, 0x00, 0xbb, 0x57, 0xa2, 0x0f, 0xd4, 0xbf, 0x45, 0x33, 0xd2, 0xb7, 0x1c, 0x3e, 0xce, 0xd1, 0xc5, 0xf3, 0xd3, 0x25, 0xdf, 0xa5, 0x1b, 0x75, 0xa5, 0x04, 0xc5, 0x09, 0x60, 0x5f, 0xfe, 0xe0, 0x77, 0x91, 0x7a, 0xc1, 0xa8, 0x41, 0x1c, 0x8f, 0xd8, 0x89, 0x79, 0x01, 0x66, 0x66, 0xbb, 0x93, 0x97, 0xf7, 0xb2, 0xd6, 0x5d, 0x87, 0x7a, 0x40, 0x6f, 0xc9, 0xcf, 0x1b, 0x7c, 0x09, 0x1a, 0x6a, 0x4a, 0xc6, 0xed, 0x9f, 0xde, 0x61, 0x56, 0x7b, 0xee, 0xf3, 0x41, 0x50, 0x96, 0xc0, 0x33, 0x3e, 0x1d, 0xc4, 0xa6, 0x9b, 0x39, 0x26, 0x4d, 0x71, 0x86, 0xf9, 0xdc, 0x10, 0xe9, 0xb6, 0x71, 0xd5, 0xb0, 0xf1, 0xe8, 0xed, 0x57, 0x12, 0x21, 0x36, 0x1e, 0x41, 0x5e, 0xca, 0xf2, 0x02, 0x22, 0x86, 0xc8, 0xf1, 0xcc, 0x2d, 0x3e, 0x6d, 0x72, 0x1e, 0xd5, 0xe6, 0x1f, 0x04, 0x6b, 0xa5, 0xb7, 0xbc, 0xcf, 0xdc, 0x7d, 0x8f, 0x84, 0x1f, 0xa6, 0x7d, 0xb5, 0x44, 0x2f, 0xa7, 0x31, 0xd6, 0xc4, 0xfc, 0xce, 0x75, 0xfa, 0xda, 0xe7, 0x1a, 0x00, 0x69, 0xf4, 0x5d, 0xdb, 0x1a, 0xa7, 0x95, 0x87, 0x01, 0xcd, 0x73, 0x83, 0x87, 0xd3, 0x3b, 0x4d, 0xfb, 0x83, 0x9e, 0x3e, 0x7e, 0x04, 0xf2, 0xbe, 0x4e, 0x5a, 0x3d, 0x1b, 0xaf, 0xb7, 0xaa, 0x69, 0x18, 0x50, 0xf3, 0xe0, 0x07, 0x82, 0x0a, 0xa3, 0x64, 0xf6, 0xbb, 0x63, 0x19, 0x0a, 0x52, 0x05, 0xd9, 0x06, 0xc7, 0xcb, 0x9b, 0x0d, 0x35, 0x00, 0x4d, 0x02, 0x5a, 0x56, 0x0f, 0x7c, 0x87, 0xfe, 0xee, 0x1c, 0xb2, 0x13, 0x2b, 0x87, 0xcf, 0xce, 0xc9, 0x14, 0x2c, 0xb5, 0x88, 0x84, 0x8d, 0x86, 0x1f, 0x30, 0x98, 0xef, 0xc4, 0x21, 0x7e, 0x5a, 0xd9, 0x4e, 0xdf, 0xf0, 0xfd, 0x71, 0xfa, 0x88, 0x2d, 0x61, 0x41, 0x15, 0x02, 0x6c, 0x09, 0x37, 0x7c, 0x1a, 0xd0, 0xe3, 0x24, 0xd2, 0x7a, 0x91, 0xca, 0x44, 0xfb, 0x10, 0xa5, 0xae, 0xaf, 0xf2, 0x05, 0xa9, 0x32, 0x4c, 0x51, 0x3f, 0x3c, 0x4d, 0x7a, 0xce, 0xaf, 0xbb, 0x2d, 0x62, 0x1e, 0xcd, 0xad, 0x7f, 0xed, 0x15, 0xdd, 0xba, 0xc4, 0xcd, 0x06, 0xa8, 0x57, 0x13, 0xa9, 0x39, 0x53, 0x8a, 0x81, 0x84, 0x91, 0x17, 0x51, 0x31, 0x0b, 0xe7, 0x94, 0x93, 0xea, 0x5e, 0x14, 0x56, 0x80, 0x13, 0x33, 0xb4, 0xd0, 0x03, 0x33, 0x10, 0xfa, 0x34, 0x89, 0x4c, 0xbb, 0x12, 0x3d, 0x66, 0xb3, 0x16, 0x46, 0x47, 0x6d, 0x80, 0x30, 0xdd, 0x5a, 0x2f, 0x6b, 0xaf, 0x7f, 0x09, 0x1f, 0x9b, 0x3d, 0x5c, 0x23, 0xa8, 0x8c, 0x37, 0xda, 0x15, 0xe5, 0xec, 0xe9, 0xff, 0xf8, 0x50, 0x8b, 0x41, 0xa0, 0xe3, 0xd8, 0x78, 0x19, 0x2a, 0xaa, 0xe1, 0xcb, 0x8f, 0x81, 0xcb, 0x9b, 0x42, 0x0a, 0x64, 0x5c, 0x79, 0x9b, 0x1c, 0x5c, 0x1f, 0x3a, 0x02, 0xcd, 0xad, 0x9f, 0xf5, 0xa3, 0xc6, 0x68, 0xdb, 0xa6, 0x45, 0x86, 0x12, 0xb2, 0x7d, 0x87, 0x0c, 0x2d, 0xf7, 0x41, 0x42, 0xc7, 0x46, 0x16, 0xec, 0xd6, 0xaa, 0xdf, 0x47, 0x98, 0x88, 0x7f, 0x06, 0x05, 0x87, 0xb8, 0xd1, 0xf0, 0x41, 0x1f, 0xe6, 0xd8, 0xfc, 0x0f, 0x69, 0x01, 0xd6, 0x60, 0x73, 0xaf, 0x67, 0xb6, 0x9f, 0xfd, 0xae, 0x12, 0x44, 0xaa, 0x33, 0xec, 0x12, 0x65, 0xac, 0xd5, 0x6f, 0x18, 0x55, 0x24, 0xde, 0x2a, 0x5b, 0xb0, 0x42, 0x94, 0x75, 0xb1, 0x64, 0xc9, 0x68, 0x4e, 0x64, 0x2c, 0x5b, 0xd7, 0x87, 0xf4, 0x89, 0x27, 0xb4, 0x4a, 0xa0, 0xc9, 0xa9, 0x42, 0x3d, 0x22, 0xd8, 0xa1, 0x71, 0x59, 0x25, 0x44, 0x3e, 0xb9, 0x0a, 0x77, 0xbc, 0x48, 0x7e, 0xc5, 0x3d, 0x16, 0x2d, 0xfa, 0xb3, 0x18, 0xd4, 0xca, 0x27, 0x16, 0x32, 0x5f, 0x13, 0x6f, 0x44, 0x62, 0x84, 0x3a, 0x82, 0xcb, 0x6b, 0x8a, 0x6e, 0xb2, 0xca, 0x47, 0x75, 0xd1, 0xc0, 0x10, 0xea, 0xc6, 0x64, 0xeb, 0x54, 0x3d, 0x77, 0x81, 0xc6, 0xb8, 0xd5, 0x25, 0x72, 0x3f, 0x3b, 0x91, 0xe4, 0xc3, 0x7a, 0xfa, 0xfa, 0x5e, 0x67, 0xb6, 0xea, 0xfa, 0xf7, 0x0c, 0x9f, 0x05, 0x48, 0x07, 0xb7, 0xd5, 0xa3, 0xc9, 0xa2, 0xb4, 0x15, 0x6b, 0x31, 0x61, 0x79, 0x26, 0x6d, 0x0a, 0x78, 0x01, 0x40, 0x34, 0x96, 0x98, 0x34, 0xc2, 0xee, 0x0c, 0x40, 0x39, 0xd3, 0xab, 0x20, 0x7c, 0x89, 0x8a, 0x73, 0xf1, 0x99, 0x7e, 0xb3, 0xd1, 0xbc, 0x33, 0x6b, 0xa7, 0xaa, 0x23, 0xff, 0x1d, 0x89, 0x06, 0x2d, 0xfe, 0x34, 0x13, 0xbf, 0x86, 0x04, 0x3e, 0x05, 0x00, 0x31, 0xe0, 0xd5, 0xbf, 0x1a, 0xf2, 0x99, 0x64, 0xb4, 0xc1, 0x6c, 0x26, 0x5b, 0x25, 0x6e, 0x31, 0xc9, 0x0d, 0x18, 0xd3, 0xb8, 0x38, 0xdc, 0xaf, 0xb1, 0x21, 0x02, 0x4d, 0x1d, 0xf6, 0x0a, 0xed, 0xa6, 0xa2, 0xc0, 0x44, 0xe3, 0xd5, 0x07, 0x86, 0x1e, 0x77, 0x87, 0x71, 0x88, 0x4e, 0x84, 0x52, 0xd9, 0x2f, 0xd6, 0xb3, 0xc4, 0xdf, 0x48, 0xd2, 0x61, 0x9c, 0x22, 0x22, 0x17, 0xe4, 0x84, 0xa4, 0x4b, 0x69, 0xcf, 0x68, 0x78, 0x3d, 0x07, 0xa8, 0xa5, 0xeb, 0xf9, 0x11, 0x18, 0x13, 0x7e, 0x7b, 0x55, 0x19, 0x40, 0x1d, 0x27, 0xe8, 0xa9, 0x7a, 0x47, 0xfa, 0xf5, 0x9a, 0x23, 0xce, 0x33, 0xb5, 0xe9, 0x22, 0xfb, 0xa3, 0x8c, 0x20, 0xe8, 0x61, 0x43, 0xdd, 0xa5, 0x90, 0x4b, 0x96, 0x13, 0x07, 0x25, 0x18, 0x9b, 0xd5, 0xe9, 0x99, 0x3d, 0xcd, 0x0e, 0xbb, 0x36, 0xbe, 0x18, 0x63, 0x7f, 0x2b, 0x0d, 0x27, 0xb3, 0xee, 0xe7, 0x5c, 0x84, 0x00, 0x1f, 0x8f, 0xaf, 0xec, 0x53, 0xbe, 0xd4, 0x5a, 0xef}
// 	proof := bn254plonk.UnmarshalSolidity(ss, 3)
// 	pi := make([]fr.Element, 1)
// 	pi[0].SetString("14617277935903348954511872008447373726184388595106564813070133963044622344216")

// 	err := tmpl.GenerateTestVerifier(proof, pi, "../contracts")
// 	checkError(err)

// }
