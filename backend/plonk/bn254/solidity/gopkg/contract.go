// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package contract

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// ContractMetaData contains all meta data concerning the Contract contract.
var ContractMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"a\",\"type\":\"bool\"}],\"name\":\"PrintBool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"}],\"name\":\"PrintUint256\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"inputs\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"w\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"n\",\"type\":\"uint256\"}],\"name\":\"test_compute_sum_li_zi\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"res\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"w\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"n\",\"type\":\"uint256\"}],\"name\":\"test_eval_ith_lagrange\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"res\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"dst\",\"type\":\"string\"}],\"name\":\"test_hash\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"res\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"test_plonk_vanilla\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b50614ffc806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c8063437a9c6a146100515780635b4a4b8414610081578063c7baa2171461009f578063e0380a93146100cf575b600080fd5b61006b6004803603810190610066919061474e565b6100ff565b60405161007891906147e0565b60405180910390f35b61008961014e565b6040516100969190614816565b60405180910390f35b6100b960048036038101906100b491906148e6565b610ec3565b6040516100c691906147e0565b60405180910390f35b6100e960048036038101906100e49190614955565b610f10565b6040516100f691906147e0565b60405180910390f35b600061010d85858585610f5f565b90507fc06f90efa9c91dc43be8c00f432325e29d17851ab0f40844b418121428cc043b8160405161013e91906147e0565b60405180910390a1949350505050565b6000610158614268565b6101606142ec565b6000600167ffffffffffffffff81111561017d5761017c6145d5565b5b6040519080825280602002602001820160405280156101ab5781602001602082028036833780820191505090505b5090506023816000815181106101c4576101c36149bc565b5b6020026020010181815250507f105dec33fd45b19232621b44a33f2ae2f3fcecd229855c7b38d622c9a02296708360000151600060048110610209576102086149bc565b5b602002015160000181815250507f111248beccec11dbd9b23f3635f52fa2538cd64ee03a579f12e447bf46413e68836000015160006004811061024f5761024e6149bc565b5b602002015160200181815250507f18eb573269979ea4487aa104e584b2230ca1cf70270513da82809a7797c97b058360000151600160048110610295576102946149bc565b5b602002015160000181815250507f2d4c41aa1bc1fde0f1ee270f1de435aed76c460ed0c6e3ed97a50a08cb23cb4d83600001516001600481106102db576102da6149bc565b5b602002015160200181815250507f081cad893bd648dc45081a39bdad906a35f34c25ed95d41491bcb8eb5a9266e18360000151600260048110610321576103206149bc565b5b602002015160000181815250507f1b85a8a0e32b55d1478646e9911f2f6d1dadb4b4e05a227fdd7b82e018c9dd1b8360000151600260048110610367576103666149bc565b5b602002015160200181815250506000836000015160036004811061038e5761038d6149bc565b5b60200201516000018181525050600083600001516003600481106103b5576103b46149bc565b5b602002015160200181815250507f165002e4a9b0dfe3f2ebb1195802ce8757834c55e2e24ffb47b728ebd36fccd2836020015160000181815250507f24fd7c161502cfdb88318c6031c39bb1b1f998396d0fa5c0125d7d3778d9066f836020015160200181815250507f2fcec72e2c552647ff8be7a5ee6bf3a011dd3a8db9e157ac58f770e794376a498360400151600060038110610457576104566149bc565b5b602002015160000181815250507f2f23db457e35634994a85f7475ac39c6f12c78a30e9ca4fd246bfb5436581d48836040015160006003811061049d5761049c6149bc565b5b602002015160200181815250507f02ac0120d6be6bebf77555a20a178589fb5676bb7a9c5c1fd083b404fb20de4683604001516001600381106104e3576104e26149bc565b5b602002015160000181815250507f126f11849be64a3d71c60f348ad9edc36624947c637d2bfb010a4d06c2f1a4898360400151600160038110610529576105286149bc565b5b602002015160200181815250507f2f1fa395b3dba20cd9b3116ebf3e3b7d7bc2ebadd020d4d025955a17d4068cb2836040015160026003811061056f5761056e6149bc565b5b602002015160000181815250507f15902df2f0e1ad04da78d0bc7e5dbd355d9627b870c1abf6fdebf0b5cee5adfa83604001516002600381106105b5576105b46149bc565b5b602002015160200181815250507f1b757db753aed1f0fbe0c0880ec8414dc21a6aa581a48dd3b4c83bc04601cfd283606001516000600381106105fb576105fa6149bc565b5b6020020181815250507f1fe8fd23032ca80b446ce84867b215016664d5e1b75ce113092e6f406f528a75836060015160016003811061063d5761063c6149bc565b5b6020020181815250507f0f93615fdd0eaffd16bb9ac92700234d999b3164b729e53b59617a399b281420836060015160026003811061067f5761067e6149bc565b5b6020020181815250507f07d43cd72b6600d367a023d046e30aeeff21435e89cea781c7f763967623b0958360800181815250507f0995a140ebddfb8357bbeddbc5e22738aaf493b63000b1965a8569c34a1af01c8360a00181815250507f1c75fec6e7494c5e580241ae5702d762c6b4e40530859e1c3e674520921f968a8360c001818152505060008360e00181815250507f061eee620915d583c201d56f4607d58200def7c4c7d27e1361052e56ac42752383610100015160006002811061074b5761074a6149bc565b5b6020020181815250507f1a87ac928f5e851b221b3de27c85693950e59bb0d70b3b1f889b9c805c504ac883610100015160016002811061078e5761078d6149bc565b5b6020020181815250507f1df304b41255a4fde6e27a6e6e4a89903b1a15799fc1cda0280af61bd816db1283610120015160000181815250507f264d0a33186ac0fa2eded6ee9d39f30edda2299ad7064b985c6aea801209226d83610120015160200181815250507f1029f38b6c63466529c5eeda1dbbba977c5b4730d3e8c12441cde1f2f33f8e3383610140015160000181815250507f0858c484be5569aaf676e2211af5aefe9286aaabb50450d68e78bc039c84e76d836101400151602001818152505060088260000181815250507f2b337de1c8c14f22ec9b9e2f96afef3652627366f8170a0a948dad4ac1bd5e808260200181815250507f121b2fdacbab425ebf9ee81b495725a960d6f7d2b06599a8f7e2909d29a5382382604001516000600681106108c1576108c06149bc565b5b602002015160000181815250507f16cd047b757f86be606d78bd8b618c8fec6202537a6b82a8661b1a8449368c5b8260400151600060068110610907576109066149bc565b5b602002015160200181815250507f066074634530cf14dd6df9b38bf91f801981fbe903e765a5c569b2b4caf97436826040015160016006811061094d5761094c6149bc565b5b602002015160000181815250507f299719e9c0b3c89686462d78919d56e6bc0dbe98be01920486f8a33685649ec78260400151600160068110610993576109926149bc565b5b602002015160200181815250507f19b46ef8e9aacf9c1fa86bf18d2f010d1034bdfcbcf8b5d180cd0293e8b926b682604001516002600681106109d9576109d86149bc565b5b602002015160000181815250507f0d733d6e72ba6bdd090d6ca70989797d83c9e4733e7d138b6fae4784baf074d98260400151600260068110610a1f57610a1e6149bc565b5b602002015160200181815250507f17a0647b6d15ab619f215e16cf2e77e889572fb3c51cdcfd3e6c50a3928d4ffa8260400151600360068110610a6557610a646149bc565b5b602002015160000181815250507f05d2aeb9e008fe0f8fb69f3f037949b616c73972354ecf9147f1217f579622a98260400151600360068110610aab57610aaa6149bc565b5b602002015160200181815250507f11275e6c26766c705df3f41c7e0df16e6efe0bffc84e80409649ee6531a339828260400151600460068110610af157610af06149bc565b5b602002015160000181815250507f20f663d3900bf3d1c36f52203a457f95b7e34e2dfd37f59b35e92ca74b7acbf38260400151600460068110610b3757610b366149bc565b5b6020020151602001818152505060008260400151600560068110610b5e57610b5d6149bc565b5b6020020151600001818152505060008260400151600560068110610b8557610b846149bc565b5b602002015160200181815250507f18e4eaf4e4d18751f23616fd8f2302890f02849a45f2acf5c8e87e9ba1ff579b8260600151600060038110610bcb57610bca6149bc565b5b602002015160000181815250507f051c2bc6bfbafd11d1f3163117f44eb1df2e6e43e6ec5422a7ebc24ce7bbb2688260600151600060038110610c1157610c106149bc565b5b602002015160200181815250507f1688a27d90667077bc87c56e0919d79303eaf9b0485dced75eb659448ee044ab8260600151600160038110610c5757610c566149bc565b5b602002015160000181815250507f0cf613d46e78db20e3d22aef1f43dccb33473d4304c714c741a478f7f30ebbfa8260600151600160038110610c9d57610c9c6149bc565b5b602002015160200181815250507f293022873ef233888872027ec5c0362e26d61ba6bd890ea370b65f8b0db0119b8260600151600260038110610ce357610ce26149bc565b5b602002015160000181815250507f1939273306aa4222e21b329d9dac48ff864efab2cde5134792487b1ed8699f0e8260600151600260038110610d2957610d286149bc565b5b60200201516020018181525050600582608001818152505060058260e00151600060028110610d5b57610d5a6149bc565b5b60200201818152505060198260e00151600160028110610d7e57610d7d6149bc565b5b6020020181815250507f1f7471d0e9e7e85a83735bc562e8d7c89a349da5162c957f8f51c9f8d9ded4b58260a0015160000151600060028110610dc457610dc36149bc565b5b6020020181815250507f173866b854c6f3f0948d0dc75fdb89e9c2f685bd4841f22d8b4978f5d726fb4d8260a0015160000151600160028110610e0a57610e096149bc565b5b6020020181815250507f10336cb3033858c806486b210e8b84515874dc5e4603cf18a42fa82b17a842e18260a0015160200151600060028110610e5057610e4f6149bc565b5b6020020181815250507f30024b093e3ba689da272cb9eb5d8660f4d4d8d034b00af0d76d8085b003e7f88260a0015160200151600160028110610e9657610e956149bc565b5b60200201818152505060008260c00181815250506000610eb784848461107b565b90508094505050505090565b6000610ed0848484611303565b90507fc06f90efa9c91dc43be8c00f432325e29d17851ab0f40844b418121428cc043b81604051610f0191906147e0565b60405180910390a19392505050565b6000610f1e85858585611453565b90507fc06f90efa9c91dc43be8c00f432325e29d17851ab0f40844b418121428cc043b81604051610f4f91906147e0565b60405180910390a1949350505050565b600080610f6c858461152f565b9050600060019050600087519050600080600080610f8a8b876115c8565b9150610f978760016115c8565b9050610fa3818361162f565b9250610faf838a61162f565b9250610fd6838d600081518110610fc957610fc86149bc565b5b602002602001015161165a565b93506000600190505b8581101561106857610ff1848461165a565b9350610ffd848c61165a565b9350611009878c61165a565b96506110158c886115c8565b9250611021848461162f565b9350611047848e838151811061103a576110396149bc565b5b602002602001015161165a565b91506110538286611696565b9450808061106090614a1a565b915050610fdf565b5083975050505050505050949350505050565b6000611085614349565b611091818686866116d2565b600061109f82878787611b00565b90506110ac828787611d1d565b6110b7828787611e02565b6110c28287876122bf565b6000600267ffffffffffffffff8111156110df576110de6145d5565b5b60405190808252806020026020018201604052801561111857816020015b6111056143c8565b8152602001906001900390816110fd5790505b50905082610140015181600081518110611135576111346149bc565b5b6020026020010181905250866020015181600181518110611159576111586149bc565b5b60200260200101819052506000600267ffffffffffffffff811115611181576111806145d5565b5b6040519080825280602002602001820160405280156111ba57816020015b6111a76143e2565b81526020019060019003908161119f5790505b509050836101200151816000815181106111d7576111d66149bc565b5b6020026020010181905250876101400151816001815181106111fc576111fb6149bc565b5b602002602001015160000181905250876080015181600181518110611224576112236149bc565b5b602002602001015160200181815250506000600267ffffffffffffffff811115611251576112506145d5565b5b60405190808252806020026020018201604052801561127f5781602001602082028036833780820191505090505b50905084606001518160008151811061129b5761129a6149bc565b5b6020026020010181815250506112b98560600151896020015161165a565b816001815181106112cd576112cc6149bc565b5b6020026020010181815250508380156112f257506112f18383838b60a0015161271b565b5b935083955050505050509392505050565b6000806113118585856129ec565b905060005b60208110156113755780600861132c9190614a62565b8282602f61133a9190614aa4565b6030811061134b5761134a6149bc565b5b602002015160ff16901b836113609190614ad8565b9250808061136d90614a1a565b915050611316565b507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001826113a29190614b3b565b9150600080600090505b601081101561140b578060086113c29190614a62565b8382600f6113d09190614aa4565b603081106113e1576113e06149bc565b5b602002015160ff16901b826113f69190614ad8565b9150808061140390614a1a565b9150506113ac565b5060007f0e0a77c19a07df2f666ea36f7879462e36fc76959f60cd29ac96341c4ffffffb905061143b828261165a565b91506114478483611696565b93505050509392505050565b600081851061146157600080fd5b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001841061148d57600080fd5b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000183106114b957600080fd5b6114c3838661152f565b92506114cf84846115c8565b94506114db848361152f565b93506114e88460016115c8565b93506114f382612d73565b91506114ff838361165a565b925061150a85612d73565b9450611516838661165a565b9250611522838561165a565b9250829050949350505050565b6000806040518060c001604052806020815260200160208152602001602081526020018581526020018481526020017f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001815250905061158c614402565b600060208260c08560055afa9050806115a457600080fd5b816000600181106115b8576115b76149bc565b5b6020020151935050505092915050565b60007f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001806115f9576115f8614b0c565b5b827f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016116259190614aa4565b8408905092915050565b600080820361163d57600080fd5b61164682612d73565b9150611652838361165a565b905092915050565b60007f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018061168b5761168a614b0c565b5b828409905092915050565b60007f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001806116c7576116c6614b0c565b5b828408905092915050565b60006116dc612dbe565b90506117266040518060400160405280600581526020017f67616d6d6100000000000000000000000000000000000000000000000000000081525082612de290919063ffffffff16565b60005b83606001515060038110156117795761176684606001518260038110611752576117516149bc565b5b602002015183612def90919063ffffffff16565b808061177190614a1a565b915050611729565b506117a98360400151600060068110611795576117946149bc565b5b602002015182612def90919063ffffffff16565b6117d883604001516001600681106117c4576117c36149bc565b5b602002015182612def90919063ffffffff16565b61180783604001516002600681106117f3576117f26149bc565b5b602002015182612def90919063ffffffff16565b6118368360400151600360068110611822576118216149bc565b5b602002015182612def90919063ffffffff16565b6118658360400151600460068110611851576118506149bc565b5b602002015182612def90919063ffffffff16565b60005b82518110156118b15761189e838281518110611887576118866149bc565b5b602002602001015183612e2b90919063ffffffff16565b80806118a990614a1a565b915050611868565b506118e184600001516003600481106118cd576118cc6149bc565b5b602002015182612def90919063ffffffff16565b61191084600001516000600481106118fc576118fb6149bc565b5b602002015182612def90919063ffffffff16565b61193f846000015160016004811061192b5761192a6149bc565b5b602002015182612def90919063ffffffff16565b61196e846000015160026004811061195a576119596149bc565b5b602002015182612def90919063ffffffff16565b61197781612e5d565b8560400181815250506119c86040518060400160405280600481526020017f626574610000000000000000000000000000000000000000000000000000000081525082612de290919063ffffffff16565b6119d181612e5d565b856020018181525050611a226040518060400160405280600581526020017f616c70686100000000000000000000000000000000000000000000000000000081525082612de290919063ffffffff16565b611a39846020015182612def90919063ffffffff16565b611a4281612e5d565b856000018181525050611a936040518060400160405280600481526020017f7a6574610000000000000000000000000000000000000000000000000000000081525082612de290919063ffffffff16565b60005b8460400151506003811015611ae657611ad385604001518260038110611abf57611abe6149bc565b5b602002015183612def90919063ffffffff16565b8080611ade90614a1a565b915050611a96565b50611af081612e5d565b8560600181815250505050505050565b600080611b158660600151856000015161152f565b9050611b228160016115c8565b90506000611b3e84886060015187602001518860000151612ff5565b90506000611b6d876101000151600060028110611b5e57611b5d6149bc565b5b6020020151896020015161165a565b9050611b7d818960400151611696565b9050611ba5818860600151600060038110611b9b57611b9a6149bc565b5b6020020151611696565b90506000611bd4886101000151600160028110611bc557611bc46149bc565b5b60200201518a6020015161165a565b9050611be4818a60400151611696565b9050611c0c818960600151600160038110611c0257611c016149bc565b5b6020020151611696565b90506000611c3a8960600151600260038110611c2b57611c2a6149bc565b5b60200201518b60400151611696565b9050611c46838361165a565b9250611c52838261165a565b9250611c62838b6000015161165a565b9250611c72838a6080015161165a565b9250611c8d60008b606001518a602001518b60000151611453565b8a60c0018181525050611ca88a60c001518b6000015161165a565b8a60c0018181525050611cc38a60c001518b6000015161165a565b8a60c00181815250506000611cdc8a60c0015186611696565b9050611ce88185611696565b9050611cf8818c60c001516115c8565b9050611d04818761162f565b90508960a0015181149650505050505050949350505050565b6000611d2e82600001516002611696565b90506000611d4085606001518361152f565b90508360400151600260038110611d5a57611d596149bc565b5b60200201518560e00181905250611d7e818660e001516130d890919063ffffffff16565b611db18460400151600160038110611d9957611d986149bc565b5b60200201518660e001516130e790919063ffffffff16565b611dc8818660e001516130d890919063ffffffff16565b611dfb8460400151600060038110611de357611de26149bc565b5b60200201518660e001516130e790919063ffffffff16565b5050505050565b6000806000611e198560800151876020015161165a565b9250611e468660200151866101000151600060028110611e3c57611e3b6149bc565b5b602002015161165a565b9150611e6e828660600151600060038110611e6457611e636149bc565b5b6020020151611696565b9150611e7e828760400151611696565b9150611eab8660200151866101000151600160028110611ea157611ea06149bc565b5b602002015161165a565b9050611ed3818660600151600160038110611ec957611ec86149bc565b5b6020020151611696565b9050611ee3818760400151611696565b90506000611ef1848461165a565b9050611efd818361165a565b9050611f0d81886000015161165a565b90506000611f238660800151876080015161165a565b90506000611f3989602001518a6060015161165a565b9050611f61818960600151600060038110611f5757611f566149bc565b5b6020020151611696565b9550611f71868a60400151611696565b9550611f8181886080015161165a565b9450611fa9858960600151600160038110611f9f57611f9e6149bc565b5b6020020151611696565b9450611fb9858a60400151611696565b9450611fc5818361165a565b9350611fed848960600151600260038110611fe357611fe26149bc565b5b6020020151611696565b9350611ffd848a60400151611696565b9350600061200b878761165a565b9050612017818661165a565b90506120246000826115c8565b9050612034818b6000015161165a565b9050612044818b60c00151611696565b9050600061208a8a60600151600060038110612063576120626149bc565b5b60200201518b606001516001600381106120805761207f6149bc565b5b602002015161165a565b90506120ce89604001516000600681106120a7576120a66149bc565b5b60200201518b606001516000600381106120c4576120c36149bc565b5b60200201516130f6565b8b6101000181905250600061211b8a604001516001600681106120f4576120f36149bc565b5b60200201518c60600151600160038110612111576121106149bc565b5b60200201516130f6565b905061212c8c61010001518261310f565b8c610100018190525061215b8a604001516002600681106121505761214f6149bc565b5b6020020151836130f6565b905061216c8c61010001518261310f565b8c61010001819052506121b78a604001516003600681106121905761218f6149bc565b5b60200201518c606001516002600381106121ad576121ac6149bc565b5b60200201516130f6565b90506121c88c61010001518261310f565b8c61010001819052506121fc8c61010001518b604001516004600681106121f2576121f16149bc565b5b602002015161310f565b8c610100018190525061222f8b600001516003600481106122205761221f6149bc565b5b60200201518c60e001516130f6565b90506122408c61010001518261310f565b8c610100018190525061226f8a60600151600260038110612264576122636149bc565b5b6020020151876130f6565b90506122808c61010001518261310f565b8c61010001819052506122978b60200151846130f6565b90506122a88c61010001518261310f565b8c6101000181905250505050505050505050505050565b6000600867ffffffffffffffff8111156122dc576122db6145d5565b5b60405190808252806020026020018201604052801561231557816020015b6123026143c8565b8152602001906001900390816122fa5790505b5090508360e0015181600081518110612331576123306149bc565b5b602002602001018190525083610100015181600181518110612356576123556149bc565b5b60200260200101819052508260000151600060048110612379576123786149bc565b5b602002015181600281518110612392576123916149bc565b5b602002602001018190525082600001516001600481106123b5576123b46149bc565b5b6020020151816003815181106123ce576123cd6149bc565b5b602002602001018190525082600001516002600481106123f1576123f06149bc565b5b60200201518160048151811061240a576124096149bc565b5b6020026020010181905250816060015160006003811061242d5761242c6149bc565b5b602002015181600581518110612446576124456149bc565b5b60200260200101819052508160600151600160038110612469576124686149bc565b5b602002015181600681518110612482576124816149bc565b5b602002602001018190525081604001516005600681106124a5576124a46149bc565b5b6020020151816007815181106124be576124bd6149bc565b5b60200260200101819052506124d1614424565b8361012001518160000181905250600867ffffffffffffffff8111156124fa576124f96145d5565b5b6040519080825280602002602001820160405280156125285781602001602082028036833780820191505090505b5081602001819052508360a00151816020015160008151811061254e5761254d6149bc565b5b6020026020010181815250508360c001518160200151600181518110612577576125766149bc565b5b602002602001018181525050836060015160006003811061259b5761259a6149bc565b5b602002015181602001516002815181106125b8576125b76149bc565b5b60200260200101818152505083606001516001600381106125dc576125db6149bc565b5b602002015181602001516003815181106125f9576125f86149bc565b5b602002602001018181525050836060015160026003811061261d5761261c6149bc565b5b6020020151816020015160048151811061263a576126396149bc565b5b60200260200101818152505083610100015160006002811061265f5761265e6149bc565b5b6020020151816020015160058151811061267c5761267b6149bc565b5b6020026020010181815250508361010001516001600281106126a1576126a06149bc565b5b602002015181602001516006815181106126be576126bd6149bc565b5b6020026020010181815250508360e0015181602001516007815181106126e7576126e66149bc565b5b60200260200101818152505061270282828760600151613128565b8661012001876101400182905282905250505050505050565b6000835185511461272b57600080fd5b825185511461273957600080fd5b60007f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001600287600081518110612772576127716149bc565b5b60200260200101516000015160405160200161278e9190614b8d565b6040516020818303038152906040526040516127aa9190614c19565b602060405180830381855afa1580156127c7573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906127ea9190614c66565b60001c6127f79190614b3b565b90506128016143c8565b6128096143c8565b6128116143c8565b600061281f85898c8c6133a0565b8094508196508297508395505050505060006128396135b1565b9050600061284782846130f6565b905061285c81876135d590919063ffffffff16565b612866868561310f565b9550612877600086602001516115c8565b856020018181525050600061288a6135e4565b90507fc06f90efa9c91dc43be8c00f432325e29d17851ab0f40844b418121428cc043b81600001516000600281106128c5576128c46149bc565b5b60200201516040516128d791906147e0565b60405180910390a17fc06f90efa9c91dc43be8c00f432325e29d17851ab0f40844b418121428cc043b8160000151600160028110612918576129176149bc565b5b602002015160405161292a91906147e0565b60405180910390a17fc06f90efa9c91dc43be8c00f432325e29d17851ab0f40844b418121428cc043b816020015160006002811061296b5761296a6149bc565b5b602002015160405161297d91906147e0565b60405180910390a17fc06f90efa9c91dc43be8c00f432325e29d17851ab0f40844b418121428cc043b81602001516001600281106129be576129bd6149bc565b5b60200201516040516129d091906147e0565b60405180910390a1600198505050505050505050949350505050565b6129f4614444565b6060600080603090506000612a08866136ae565b905060005b6040811015612a4d578484604051602001612a29929190614cd6565b60405160208183030381529060405294508080612a4590614a1a565b915050612a0d565b508388888585878b87604051602001612a6d989796959493929190614d45565b60405160208183030381529060405293506000600285604051612a909190614c19565b602060405180830381855afa158015612aad573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190612ad09190614c66565b90508060018884604051602001612aea9493929190614df0565b60405160208183030381529060405294506000600286604051612b0d9190614c19565b602060405180830381855afa158015612b2a573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190612b4d9190614c66565b905060005b6020811015612bac57818160208110612b6e57612b6d6149bc565b5b1a60f81b60f81c888260308110612b8857612b876149bc565b5b602002019060ff16908160ff16815250508080612ba490614a1a565b915050612b52565b5080600060208110612bc157612bc06149bc565b5b1a60f81b60f81c82600060208110612bdc57612bdb6149bc565b5b1a60f81b60f81c18604051602001612bf49190614e3a565b60405160208183030381529060405295506000600190505b6020811015612c805786828260208110612c2957612c286149bc565b5b1a60f81b60f81c848360208110612c4357612c426149bc565b5b1a60f81b60f81c18604051602001612c5c929190614cd6565b60405160208183030381529060405296508080612c7890614a1a565b915050612c0c565b508560028985604051602001612c999493929190614e55565b6040516020818303038152906040529550600286604051612cba9190614c19565b602060405180830381855afa158015612cd7573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190612cfa9190614c66565b905060005b6010811015612d6557818160208110612d1b57612d1a6149bc565b5b1a60f81b60f81c88602083612d309190614ad8565b60308110612d4157612d406149bc565b5b602002019060ff16908160ff16815250508080612d5d90614a1a565b915050612cff565b505050505050509392505050565b6000808203612d8157600080fd5b612db78260027f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001612db29190614aa4565b61152f565b9050919050565b612dc6614467565b6000816060019063ffffffff16908163ffffffff168152505090565b8082604001819052505050565b816020015181600001518260200151604051602001612e1093929190614e9b565b60405160208183030381529060405282602001819052505050565b816020015181604051602001612e42929190614ed4565b60405160208183030381529060405282602001819052505050565b6000806000836060015163ffffffff1614612ef8576002836040015184600001518560200151604051602001612e9593929190614efc565b604051602081830303815290604052604051612eb19190614c19565b602060405180830381855afa158015612ece573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190612ef19190614c66565b9050612f74565b600283604001518460200151604051602001612f15929190614f31565b604051602081830303815290604052604051612f319190614c19565b602060405180830381855afa158015612f4e573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190612f719190614c66565b90505b600183606001818151612f879190614f65565b91509063ffffffff16908163ffffffff1681525050808360000181815250507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018160001c612fd59190614b3b565b915060405180602001604052806000815250836020018190525050919050565b60008085510361300857600090506130d0565b60006130178651868686613863565b9050600061305b82600081518110613032576130316149bc565b5b60200260200101518860008151811061304e5761304d6149bc565b5b602002602001015161165a565b90506000600190505b87518110156130c9576130b4826130af858481518110613087576130866149bc565b5b60200260200101518b85815181106130a2576130a16149bc565b5b602002602001015161165a565b611696565b915080806130c190614a1a565b915050613064565b5080925050505b949350505050565b6130e3828284613b41565b5050565b6130f2828284613bca565b5050565b6130fe6143c8565b613109838383613b41565b92915050565b6131176143c8565b613122838383613bca565b92915050565b6131306143e2565b6131386143c8565b83602001515185511461314a57600080fd5b6000613154612dbe565b905061319e6040518060400160405280600581526020017f67616d6d6100000000000000000000000000000000000000000000000000000081525082612de290919063ffffffff16565b6131b18482613cf690919063ffffffff16565b60005b86518110156131fd576131ea8782815181106131d3576131d26149bc565b5b602002602001015183612def90919063ffffffff16565b80806131f590614a1a565b9150506131b4565b50600061320982612e5d565b90506132188660000151613d28565b84600001819052506000875167ffffffffffffffff81111561323d5761323c6145d5565b5b60405190808252806020026020018201604052801561326b5781602001602082028036833780820191505090505b509050600181600081518110613284576132836149bc565b5b60200260200101818152505086602001516000815181106132a8576132a76149bc565b5b6020026020010151856020018181525050600080600190505b8951811015613387576132fa836001836132db9190614aa4565b815181106132ec576132eb6149bc565b5b60200260200101518561165a565b83828151811061330d5761330c6149bc565b5b60200260200101818152505061335b83828151811061332f5761332e6149bc565b5b60200260200101518a60200151838151811061334e5761334d6149bc565b5b602002602001015161165a565b915061336b876020015183611696565b876020018181525050808061337f90614a1a565b9150506132c1565b506133928983613d51565b945050505050935093915050565b6133a86143c8565b6133b06143c8565b6133b86143c8565b60008088905060006133c86143c8565b876000815181106133dc576133db6149bc565b5b6020026020010151600001519650886000815181106133fe576133fd6149bc565b5b6020026020010151955061344c8860008151811061341f5761341e6149bc565b5b6020026020010151600001518b60008151811061343f5761343e6149bc565b5b60200260200101516130f6565b945087600081518110613462576134616149bc565b5b60200260200101516020015193506000600190505b8851811015613599576134a8898281518110613496576134956149bc565b5b602002602001015160000151856130f6565b91506134b4888361310f565b97506134da8a82815181106134cc576134cb6149bc565b5b6020026020010151856130f6565b91506134e6878361310f565b965061350c848c83815181106134ff576134fe6149bc565b5b602002602001015161165a565b9250613536898281518110613524576135236149bc565b5b602002602001015160000151846130f6565b9150613542868361310f565b955061356c848a838151811061355b5761355a6149bc565b5b60200260200101516020015161165a565b92506135788584611696565b9450613584848d61165a565b9350808061359190614a1a565b915050613477565b50848688965096509650505050945094509450949050565b6135b96143c8565b6040518060400160405280600181526020016002815250905090565b6135e0828284613e28565b5050565b6135ec614498565b604051806040016040528060405180604001604052807f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c281526020017f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed815250815260200160405180604001604052807f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b81526020017f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa815250815250905090565b60008060008084519050600092505b808210156138585760008583815181106136da576136d96149bc565b5b602001015160f81c60f81b9050608060f81b817effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161015613729576001836137229190614ad8565b9250613844565b60e060f81b817effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916101561376b576002836137649190614ad8565b9250613843565b60f060f81b817effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191610156137ad576003836137a69190614ad8565b9250613842565b60f8801b817effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191610156137ee576004836137e79190614ad8565b9250613841565b60fc60f81b817effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161015613830576005836138299190614ad8565b9250613840565b60068361383d9190614ad8565b92505b5b5b5b5b50828061385090614a1a565b9350506136bd565b829350505050919050565b606060008567ffffffffffffffff811115613881576138806145d5565b5b6040519080825280602002602001820160405280156138af5781602001602082028036833780820191505090505b50905060006001905060005b8781101561391f576138cd87836115c8565b8382815181106138e0576138df6149bc565b5b602002602001018181525050876001826138fa9190614ad8565b1461390c57613909828761165a565b91505b808061391790614a1a565b9150506138bb565b5061394582600081518110613937576139366149bc565b5b60200260200101518561165a565b82600081518110613959576139586149bc565b5b602002602001018181525050600061397083613faa565b905061397c878661152f565b91506139898260016115c8565b91506139b082826000815181106139a3576139a26149bc565b5b602002602001015161165a565b816000815181106139c4576139c36149bc565b5b6020026020010181815250506139db8760016115c8565b836000815181106139ef576139ee6149bc565b5b6020026020010181815250506000600190505b88811015613b3257613a54828281518110613a2057613a1f6149bc565b5b602002602001015185600184613a369190614aa4565b81518110613a4757613a466149bc565b5b602002602001015161165a565b828281518110613a6757613a666149bc565b5b602002602001018181525050613a97828281518110613a8957613a886149bc565b5b60200260200101518861165a565b828281518110613aaa57613aa96149bc565b5b602002602001018181525050613b00828281518110613acc57613acb6149bc565b5b602002602001015183600184613ae29190614aa4565b81518110613af357613af26149bc565b5b602002602001015161165a565b828281518110613b1357613b126149bc565b5b6020026020010181815250508080613b2a90614a1a565b915050613a02565b50809350505050949350505050565b613b496144be565b836000015181600060038110613b6257613b616149bc565b5b602002018181525050836020015181600160038110613b8457613b836149bc565b5b6020020181815250508281600260038110613ba257613ba16149bc565b5b602002018181525050600060408360608460075afa905080613bc357600080fd5b5050505050565b60008260000151148015613be2575060008260200151145b15613c085782600001518160000181815250508260200151816020018181525050613cf1565b60008360000151148015613c20575060008360200151145b15613c465781600001518160000181815250508160200151816020018181525050613cf1565b613c4e6144e0565b836000015181600060048110613c6757613c666149bc565b5b602002018181525050836020015181600160048110613c8957613c886149bc565b5b602002018181525050826000015181600260048110613cab57613caa6149bc565b5b602002018181525050826020015181600360048110613ccd57613ccc6149bc565b5b602002018181525050600060408360808460065afa905080613cee57600080fd5b50505b505050565b816020015181604051602001613d0d929190614ed4565b60405160208183030381529060405282602001819052505050565b613d306143c8565b81600001518160000181815250508160200151816020018181525050919050565b613d596143c8565b8151835114613d6757600080fd5b613d6f6143c8565b613daf84600081518110613d8657613d856149bc565b5b602002602001015184600081518110613da257613da16149bc565b5b60200260200101516130f6565b91506000600190505b8451811015613e2057613dff858281518110613dd757613dd66149bc565b5b6020026020010151858381518110613df257613df16149bc565b5b60200260200101516130f6565b9150613e0b838361310f565b92508080613e1890614a1a565b915050613db8565b505092915050565b60008260000151148015613e40575060008260200151145b15613e665782600001518160000181815250508260200151816020018181525050613fa5565b60008360000151148015613e7e575060008360200151145b15613ecf57816000015181600001818152505081602001517f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47613ec19190614aa4565b816020018181525050613fa5565b613ed76144e0565b836000015181600060048110613ef057613eef6149bc565b5b602002018181525050836020015181600160048110613f1257613f116149bc565b5b602002018181525050826000015181600260048110613f3457613f336149bc565b5b60200201818152505082602001517f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47613f6d9190614aa4565b81600360048110613f8157613f806149bc565b5b602002018181525050600060408360808460065afa905080613fa257600080fd5b50505b505050565b606060008251905060008167ffffffffffffffff811115613fce57613fcd6145d5565b5b604051908082528060200260200182016040528015613ffc5781602001602082028036833780820191505090505b5090508360018361400d9190614aa4565b8151811061401e5761401d6149bc565b5b6020026020010151816001846140349190614aa4565b81518110614045576140446149bc565b5b60200260200101818152505060006001836140609190614aa4565b90505b60008111156140f4576140b6828281518110614082576140816149bc565b5b6020026020010151866001846140989190614aa4565b815181106140a9576140a86149bc565b5b602002602001015161165a565b826001836140c49190614aa4565b815181106140d5576140d46149bc565b5b60200260200101818152505080806140ec90614f9d565b915050614063565b50600061411b8260008151811061410e5761410d6149bc565b5b6020026020010151612d73565b905060008367ffffffffffffffff811115614139576141386145d5565b5b6040519080825280602002602001820160405280156141675781602001602082028036833780820191505090505b50905060006001905060005b8581101561425a57614185848361165a565b838281518110614198576141976149bc565b5b602002602001018181525050856001826141b29190614ad8565b14614247576142018382815181106141cd576141cc6149bc565b5b6020026020010151866001846141e39190614ad8565b815181106141f4576141f36149bc565b5b602002602001015161165a565b838281518110614214576142136149bc565b5b60200260200101818152505061424482898381518110614237576142366149bc565b5b602002602001015161165a565b91505b808061425290614a1a565b915050614173565b508195505050505050919050565b60405180610160016040528061427c614502565b81526020016142896143c8565b815260200161429661452f565b81526020016142a36144be565b8152602001600081526020016000815260200160008152602001600081526020016142cc61455c565b81526020016142d96143c8565b81526020016142e66143c8565b81525090565b604051806101000160405280600081526020016000815260200161430e61457e565b815260200161431b61452f565b81526020016000815260200161432f614498565b81526020016000815260200161434361455c565b81525090565b6040518061018001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200161438e6143c8565b815260200161439b6143c8565b81526020016143a86143e2565b81526020016143b56143c8565b81526020016143c26143c8565b81525090565b604051806040016040528060008152602001600081525090565b60405180604001604052806143f56143c8565b8152602001600081525090565b6040518060200160405280600190602082028036833780820191505090505090565b60405180604001604052806144376143c8565b8152602001606081525090565b604051806106000160405280603090602082028036833780820191505090505090565b6040518060800160405280600080191681526020016060815260200160608152602001600063ffffffff1681525090565b60405180604001604052806144ab61455c565b81526020016144b861455c565b81525090565b6040518060600160405280600390602082028036833780820191505090505090565b6040518060800160405280600490602082028036833780820191505090505090565b60405180608001604052806004905b6145196143c8565b8152602001906001900390816145115790505090565b60405180606001604052806003905b6145466143c8565b81526020019060019003908161453e5790505090565b6040518060400160405280600290602082028036833780820191505090505090565b6040518060c001604052806006905b6145956143c8565b81526020019060019003908161458d5790505090565b6000604051905090565b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61460d826145c4565b810181811067ffffffffffffffff8211171561462c5761462b6145d5565b5b80604052505050565b600061463f6145ab565b905061464b8282614604565b919050565b600067ffffffffffffffff82111561466b5761466a6145d5565b5b602082029050602081019050919050565b600080fd5b6000819050919050565b61469481614681565b811461469f57600080fd5b50565b6000813590506146b18161468b565b92915050565b60006146ca6146c584614650565b614635565b905080838252602082019050602084028301858111156146ed576146ec61467c565b5b835b81811015614716578061470288826146a2565b8452602084019350506020810190506146ef565b5050509392505050565b600082601f830112614735576147346145bf565b5b81356147458482602086016146b7565b91505092915050565b60008060008060808587031215614768576147676145b5565b5b600085013567ffffffffffffffff811115614786576147856145ba565b5b61479287828801614720565b94505060206147a3878288016146a2565b93505060406147b4878288016146a2565b92505060606147c5878288016146a2565b91505092959194509250565b6147da81614681565b82525050565b60006020820190506147f560008301846147d1565b92915050565b60008115159050919050565b614810816147fb565b82525050565b600060208201905061482b6000830184614807565b92915050565b600080fd5b600067ffffffffffffffff821115614851576148506145d5565b5b61485a826145c4565b9050602081019050919050565b82818337600083830152505050565b600061488961488484614836565b614635565b9050828152602081018484840111156148a5576148a4614831565b5b6148b0848285614867565b509392505050565b600082601f8301126148cd576148cc6145bf565b5b81356148dd848260208601614876565b91505092915050565b6000806000606084860312156148ff576148fe6145b5565b5b600061490d868287016146a2565b935050602061491e868287016146a2565b925050604084013567ffffffffffffffff81111561493f5761493e6145ba565b5b61494b868287016148b8565b9150509250925092565b6000806000806080858703121561496f5761496e6145b5565b5b600061497d878288016146a2565b945050602061498e878288016146a2565b935050604061499f878288016146a2565b92505060606149b0878288016146a2565b91505092959194509250565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000614a2582614681565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203614a5757614a566149eb565b5b600182019050919050565b6000614a6d82614681565b9150614a7883614681565b9250828202614a8681614681565b91508282048414831517614a9d57614a9c6149eb565b5b5092915050565b6000614aaf82614681565b9150614aba83614681565b9250828203905081811115614ad257614ad16149eb565b5b92915050565b6000614ae382614681565b9150614aee83614681565b9250828201905080821115614b0657614b056149eb565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000614b4682614681565b9150614b5183614681565b925082614b6157614b60614b0c565b5b828206905092915050565b6000819050919050565b614b87614b8282614681565b614b6c565b82525050565b6000614b998284614b76565b60208201915081905092915050565b600081519050919050565b600081905092915050565b60005b83811015614bdc578082015181840152602081019050614bc1565b60008484015250505050565b6000614bf382614ba8565b614bfd8185614bb3565b9350614c0d818560208601614bbe565b80840191505092915050565b6000614c258284614be8565b915081905092915050565b6000819050919050565b614c4381614c30565b8114614c4e57600080fd5b50565b600081519050614c6081614c3a565b92915050565b600060208284031215614c7c57614c7b6145b5565b5b6000614c8a84828501614c51565b91505092915050565b600060ff82169050919050565b60008160f81b9050919050565b6000614cb882614ca0565b9050919050565b614cd0614ccb82614c93565b614cad565b82525050565b6000614ce28285614be8565b9150614cee8284614cbf565b6001820191508190509392505050565b600081519050919050565b600081905092915050565b6000614d1f82614cfe565b614d298185614d09565b9350614d39818560208601614bbe565b80840191505092915050565b6000614d51828b614be8565b9150614d5d828a614b76565b602082019150614d6d8289614b76565b602082019150614d7d8288614cbf565b600182019150614d8d8287614cbf565b600182019150614d9d8286614cbf565b600182019150614dad8285614d14565b9150614db98284614cbf565b6001820191508190509998505050505050505050565b6000819050919050565b614dea614de582614c30565b614dcf565b82525050565b6000614dfc8287614dd9565b602082019150614e0c8286614cbf565b600182019150614e1c8285614d14565b9150614e288284614cbf565b60018201915081905095945050505050565b6000614e468284614cbf565b60018201915081905092915050565b6000614e618287614be8565b9150614e6d8286614cbf565b600182019150614e7d8285614d14565b9150614e898284614cbf565b60018201915081905095945050505050565b6000614ea78286614be8565b9150614eb38285614b76565b602082019150614ec38284614b76565b602082019150819050949350505050565b6000614ee08285614be8565b9150614eec8284614b76565b6020820191508190509392505050565b6000614f088286614d14565b9150614f148285614dd9565b602082019150614f248284614be8565b9150819050949350505050565b6000614f3d8285614d14565b9150614f498284614be8565b91508190509392505050565b600063ffffffff82169050919050565b6000614f7082614f55565b9150614f7b83614f55565b9250828201905063ffffffff811115614f9757614f966149eb565b5b92915050565b6000614fa882614681565b915060008203614fbb57614fba6149eb565b5b60018203905091905056fea2646970667358221220cf23d7d65645548fdbd8ff7aaf901db58f0f802cdbfe6778b5c6db391b6e51d864736f6c63430008130033",
}

// ContractABI is the input ABI used to generate the binding from.
// Deprecated: Use ContractMetaData.ABI instead.
var ContractABI = ContractMetaData.ABI

// ContractBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ContractMetaData.Bin instead.
var ContractBin = ContractMetaData.Bin

// DeployContract deploys a new Ethereum contract, binding an instance of Contract to it.
func DeployContract(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Contract, error) {
	parsed, err := ContractMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ContractBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Contract{ContractCaller: ContractCaller{contract: contract}, ContractTransactor: ContractTransactor{contract: contract}, ContractFilterer: ContractFilterer{contract: contract}}, nil
}

// Contract is an auto generated Go binding around an Ethereum contract.
type Contract struct {
	ContractCaller     // Read-only binding to the contract
	ContractTransactor // Write-only binding to the contract
	ContractFilterer   // Log filterer for contract events
}

// ContractCaller is an auto generated read-only Go binding around an Ethereum contract.
type ContractCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ContractTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ContractFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ContractSession struct {
	Contract     *Contract         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ContractCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ContractCallerSession struct {
	Contract *ContractCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// ContractTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ContractTransactorSession struct {
	Contract     *ContractTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// ContractRaw is an auto generated low-level Go binding around an Ethereum contract.
type ContractRaw struct {
	Contract *Contract // Generic contract binding to access the raw methods on
}

// ContractCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ContractCallerRaw struct {
	Contract *ContractCaller // Generic read-only contract binding to access the raw methods on
}

// ContractTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ContractTransactorRaw struct {
	Contract *ContractTransactor // Generic write-only contract binding to access the raw methods on
}

// NewContract creates a new instance of Contract, bound to a specific deployed contract.
func NewContract(address common.Address, backend bind.ContractBackend) (*Contract, error) {
	contract, err := bindContract(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Contract{ContractCaller: ContractCaller{contract: contract}, ContractTransactor: ContractTransactor{contract: contract}, ContractFilterer: ContractFilterer{contract: contract}}, nil
}

// NewContractCaller creates a new read-only instance of Contract, bound to a specific deployed contract.
func NewContractCaller(address common.Address, caller bind.ContractCaller) (*ContractCaller, error) {
	contract, err := bindContract(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ContractCaller{contract: contract}, nil
}

// NewContractTransactor creates a new write-only instance of Contract, bound to a specific deployed contract.
func NewContractTransactor(address common.Address, transactor bind.ContractTransactor) (*ContractTransactor, error) {
	contract, err := bindContract(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ContractTransactor{contract: contract}, nil
}

// NewContractFilterer creates a new log filterer instance of Contract, bound to a specific deployed contract.
func NewContractFilterer(address common.Address, filterer bind.ContractFilterer) (*ContractFilterer, error) {
	contract, err := bindContract(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ContractFilterer{contract: contract}, nil
}

// bindContract binds a generic wrapper to an already deployed contract.
func bindContract(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ContractMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Contract *ContractRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Contract.Contract.ContractCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Contract *ContractRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Contract.Contract.ContractTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Contract *ContractRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Contract.Contract.ContractTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Contract *ContractCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Contract.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Contract *ContractTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Contract.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Contract *ContractTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Contract.Contract.contract.Transact(opts, method, params...)
}

// TestComputeSumLiZi is a paid mutator transaction binding the contract method 0x437a9c6a.
//
// Solidity: function test_compute_sum_li_zi(uint256[] inputs, uint256 z, uint256 w, uint256 n) returns(uint256 res)
func (_Contract *ContractTransactor) TestComputeSumLiZi(opts *bind.TransactOpts, inputs []*big.Int, z *big.Int, w *big.Int, n *big.Int) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "test_compute_sum_li_zi", inputs, z, w, n)
}

// TestComputeSumLiZi is a paid mutator transaction binding the contract method 0x437a9c6a.
//
// Solidity: function test_compute_sum_li_zi(uint256[] inputs, uint256 z, uint256 w, uint256 n) returns(uint256 res)
func (_Contract *ContractSession) TestComputeSumLiZi(inputs []*big.Int, z *big.Int, w *big.Int, n *big.Int) (*types.Transaction, error) {
	return _Contract.Contract.TestComputeSumLiZi(&_Contract.TransactOpts, inputs, z, w, n)
}

// TestComputeSumLiZi is a paid mutator transaction binding the contract method 0x437a9c6a.
//
// Solidity: function test_compute_sum_li_zi(uint256[] inputs, uint256 z, uint256 w, uint256 n) returns(uint256 res)
func (_Contract *ContractTransactorSession) TestComputeSumLiZi(inputs []*big.Int, z *big.Int, w *big.Int, n *big.Int) (*types.Transaction, error) {
	return _Contract.Contract.TestComputeSumLiZi(&_Contract.TransactOpts, inputs, z, w, n)
}

// TestEvalIthLagrange is a paid mutator transaction binding the contract method 0xe0380a93.
//
// Solidity: function test_eval_ith_lagrange(uint256 i, uint256 z, uint256 w, uint256 n) returns(uint256 res)
func (_Contract *ContractTransactor) TestEvalIthLagrange(opts *bind.TransactOpts, i *big.Int, z *big.Int, w *big.Int, n *big.Int) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "test_eval_ith_lagrange", i, z, w, n)
}

// TestEvalIthLagrange is a paid mutator transaction binding the contract method 0xe0380a93.
//
// Solidity: function test_eval_ith_lagrange(uint256 i, uint256 z, uint256 w, uint256 n) returns(uint256 res)
func (_Contract *ContractSession) TestEvalIthLagrange(i *big.Int, z *big.Int, w *big.Int, n *big.Int) (*types.Transaction, error) {
	return _Contract.Contract.TestEvalIthLagrange(&_Contract.TransactOpts, i, z, w, n)
}

// TestEvalIthLagrange is a paid mutator transaction binding the contract method 0xe0380a93.
//
// Solidity: function test_eval_ith_lagrange(uint256 i, uint256 z, uint256 w, uint256 n) returns(uint256 res)
func (_Contract *ContractTransactorSession) TestEvalIthLagrange(i *big.Int, z *big.Int, w *big.Int, n *big.Int) (*types.Transaction, error) {
	return _Contract.Contract.TestEvalIthLagrange(&_Contract.TransactOpts, i, z, w, n)
}

// TestHash is a paid mutator transaction binding the contract method 0xc7baa217.
//
// Solidity: function test_hash(uint256 x, uint256 y, string dst) returns(uint256 res)
func (_Contract *ContractTransactor) TestHash(opts *bind.TransactOpts, x *big.Int, y *big.Int, dst string) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "test_hash", x, y, dst)
}

// TestHash is a paid mutator transaction binding the contract method 0xc7baa217.
//
// Solidity: function test_hash(uint256 x, uint256 y, string dst) returns(uint256 res)
func (_Contract *ContractSession) TestHash(x *big.Int, y *big.Int, dst string) (*types.Transaction, error) {
	return _Contract.Contract.TestHash(&_Contract.TransactOpts, x, y, dst)
}

// TestHash is a paid mutator transaction binding the contract method 0xc7baa217.
//
// Solidity: function test_hash(uint256 x, uint256 y, string dst) returns(uint256 res)
func (_Contract *ContractTransactorSession) TestHash(x *big.Int, y *big.Int, dst string) (*types.Transaction, error) {
	return _Contract.Contract.TestHash(&_Contract.TransactOpts, x, y, dst)
}

// TestPlonkVanilla is a paid mutator transaction binding the contract method 0x5b4a4b84.
//
// Solidity: function test_plonk_vanilla() returns(bool)
func (_Contract *ContractTransactor) TestPlonkVanilla(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "test_plonk_vanilla")
}

// TestPlonkVanilla is a paid mutator transaction binding the contract method 0x5b4a4b84.
//
// Solidity: function test_plonk_vanilla() returns(bool)
func (_Contract *ContractSession) TestPlonkVanilla() (*types.Transaction, error) {
	return _Contract.Contract.TestPlonkVanilla(&_Contract.TransactOpts)
}

// TestPlonkVanilla is a paid mutator transaction binding the contract method 0x5b4a4b84.
//
// Solidity: function test_plonk_vanilla() returns(bool)
func (_Contract *ContractTransactorSession) TestPlonkVanilla() (*types.Transaction, error) {
	return _Contract.Contract.TestPlonkVanilla(&_Contract.TransactOpts)
}

// ContractPrintBoolIterator is returned from FilterPrintBool and is used to iterate over the raw logs and unpacked data for PrintBool events raised by the Contract contract.
type ContractPrintBoolIterator struct {
	Event *ContractPrintBool // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractPrintBoolIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractPrintBool)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractPrintBool)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractPrintBoolIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractPrintBoolIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractPrintBool represents a PrintBool event raised by the Contract contract.
type ContractPrintBool struct {
	A   bool
	Raw types.Log // Blockchain specific contextual infos
}

// FilterPrintBool is a free log retrieval operation binding the contract event 0x3e1a1345e360785a18ee3f9d25ba93d69ea5c3b5772b44df827662204209612c.
//
// Solidity: event PrintBool(bool a)
func (_Contract *ContractFilterer) FilterPrintBool(opts *bind.FilterOpts) (*ContractPrintBoolIterator, error) {

	logs, sub, err := _Contract.contract.FilterLogs(opts, "PrintBool")
	if err != nil {
		return nil, err
	}
	return &ContractPrintBoolIterator{contract: _Contract.contract, event: "PrintBool", logs: logs, sub: sub}, nil
}

// WatchPrintBool is a free log subscription operation binding the contract event 0x3e1a1345e360785a18ee3f9d25ba93d69ea5c3b5772b44df827662204209612c.
//
// Solidity: event PrintBool(bool a)
func (_Contract *ContractFilterer) WatchPrintBool(opts *bind.WatchOpts, sink chan<- *ContractPrintBool) (event.Subscription, error) {

	logs, sub, err := _Contract.contract.WatchLogs(opts, "PrintBool")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractPrintBool)
				if err := _Contract.contract.UnpackLog(event, "PrintBool", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePrintBool is a log parse operation binding the contract event 0x3e1a1345e360785a18ee3f9d25ba93d69ea5c3b5772b44df827662204209612c.
//
// Solidity: event PrintBool(bool a)
func (_Contract *ContractFilterer) ParsePrintBool(log types.Log) (*ContractPrintBool, error) {
	event := new(ContractPrintBool)
	if err := _Contract.contract.UnpackLog(event, "PrintBool", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractPrintUint256Iterator is returned from FilterPrintUint256 and is used to iterate over the raw logs and unpacked data for PrintUint256 events raised by the Contract contract.
type ContractPrintUint256Iterator struct {
	Event *ContractPrintUint256 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractPrintUint256Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractPrintUint256)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractPrintUint256)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractPrintUint256Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractPrintUint256Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractPrintUint256 represents a PrintUint256 event raised by the Contract contract.
type ContractPrintUint256 struct {
	A   *big.Int
	Raw types.Log // Blockchain specific contextual infos
}

// FilterPrintUint256 is a free log retrieval operation binding the contract event 0xc06f90efa9c91dc43be8c00f432325e29d17851ab0f40844b418121428cc043b.
//
// Solidity: event PrintUint256(uint256 a)
func (_Contract *ContractFilterer) FilterPrintUint256(opts *bind.FilterOpts) (*ContractPrintUint256Iterator, error) {

	logs, sub, err := _Contract.contract.FilterLogs(opts, "PrintUint256")
	if err != nil {
		return nil, err
	}
	return &ContractPrintUint256Iterator{contract: _Contract.contract, event: "PrintUint256", logs: logs, sub: sub}, nil
}

// WatchPrintUint256 is a free log subscription operation binding the contract event 0xc06f90efa9c91dc43be8c00f432325e29d17851ab0f40844b418121428cc043b.
//
// Solidity: event PrintUint256(uint256 a)
func (_Contract *ContractFilterer) WatchPrintUint256(opts *bind.WatchOpts, sink chan<- *ContractPrintUint256) (event.Subscription, error) {

	logs, sub, err := _Contract.contract.WatchLogs(opts, "PrintUint256")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractPrintUint256)
				if err := _Contract.contract.UnpackLog(event, "PrintUint256", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePrintUint256 is a log parse operation binding the contract event 0xc06f90efa9c91dc43be8c00f432325e29d17851ab0f40844b418121428cc043b.
//
// Solidity: event PrintUint256(uint256 a)
func (_Contract *ContractFilterer) ParsePrintUint256(log types.Log) (*ContractPrintUint256, error) {
	event := new(ContractPrintUint256)
	if err := _Contract.contract.UnpackLog(event, "PrintUint256", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
