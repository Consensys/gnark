// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package contract

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// ContractABI is the input ABI used to generate the binding from.
const ContractABI = "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"a\",\"type\":\"bool\"}],\"name\":\"PrintBool\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"test_verifier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"},{\"internalType\":\"uint256[]\",\"name\":\"public_inputs\",\"type\":\"uint256[]\"}],\"name\":\"test_verifier_go\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// ContractBin is the compiled bytecode used for deploying new contracts.
var ContractBin = "0x608060405234801561001057600080fd5b50613eba806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80638cbba7b71461003b578063c383590a14610045575b600080fd5b610043610061565b005b61005f600480360381019061005a919061362b565b610167565b005b6000600167ffffffffffffffff81111561007e5761007d613402565b5b6040519080825280602002602001820160405280156100ac5781602001602082028036833780820191505090505b5090506020816000815181106100c5576100c46136a3565b5b60200260200101818152505060006100db6101ba565b905060006100e9828461090c565b90507f3e1a1345e360785a18ee3f9d25ba93d69ea5c3b5772b44df827662204209612c8160405161011a91906136ed565b60405180910390a180610162576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161015990613765565b60405180910390fd5b505050565b6000610173838361090c565b9050806101b5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ac90613765565b60405180910390fd5b505050565b60606101c46132c3565b7f110c76d32a80cde62cf096e257aaf564387650d7e59eac0b9d44298717d0d77a8160000181815250507f1ecdff978c4f57b866e692a3207eacd40054e51e5d1cba040717fbd3398d19838160200181815250507f0a43d083e9bd1883834a1a013b867f90a7d015d174109cebf1430a9b19c7cc858160400181815250507f2a761a59e5f159fd34d8940c754e4cc62c0ad1454ecf2b549286737d511827a08160600181815250507f13718ad09e955afbcaffdded53e276b2c1e6e075b7484867ac62637924d34e428160800181815250507f2663286e86b6989cac9023f4611a79847872a6aa1334308ab016e47dbf5c623b8160a00181815250507f088f1bc56de03bcf19f53aaddf925d7b91a742687293a3cac137d562b513a37d8160c00181815250507f0132f9afdb61342f1c3d16a0fa9bf3bebf42c0cea0f0b62a03a676bbbb869f498160e00181815250507f23042728519556ee127b7b1ada126bf0595f377f928d3b1686c1ea5d3e2ada03816101000181815250507f1e024a71956d30ba2c9a17e7585ee4e46d89be78bdb64dd00e2615a1687fb8e3816101200181815250507f2545d59ad7aaf1dbc2c0b47a101071bb87a23c4f6810621de934c210d36a7c60816101400181815250507f1c6c009094c7ab7e42eb8e911a2b6f872765fbaaae20e77d6c4060f40cca847b816101600181815250507f20d3f8ebd8c1a2d7ce7fd8042294164901f6e43aa359daf1483feb6e1545893e816101800181815250507f2ba1a24ddb14f4a64a6baccdd9eafdb76773c9b6bf76d9e31b9eacc633f147aa816101a00181815250507f0e57f1b8be121f8ce1ec3466722095425d68d6cf583cb5455be94706b8bb3606816101c00181815250507f2376f48e2baecfe21fc02c487d2d617a354cf812a9db6586e686a1a5d12abb97816101e00181815250507f25fca152544fbc34559929f0bb3b298556c1124175197c0f7cfaf70a683dc6c8816102000181815250507f0f40df70dfe907622f682ed9573c8b27572ef1fa3584b91782cf9643698aeff5816102200181815250507f0cf810fad491c4f564867112cbea482807e410b83672c532465a14fe1cad0b64816102400181815250507f28d3fecad54bd41bcc8ea466331be2613fa51f7cf26d7190d1afa3c70131257b816102600181815250507f257e76c46c95f853a5ea6d3d6c20b1203aaada65159cce81a5ced1673f463146816102800181815250507f255f483286d8789e5fc8704f7baf193a7d11bf696efe6413efabaa0f87dd6647816102a00181815250507f015859b71e6413f4fb71f04d218f5a72a2bc06ca60a5470a4d3087bec1bc0fc4816102c00181815250507f25c6d84f667cf0f80d6eb5ec608f38476026cfcf968df1e3b54cf843b2ca0d6f816102e00181815250507f2488e26f263ef3abee3f5cb264eb8c67b46aab143c58a60d346c6219a876ae6e816103000181815250507f072b20004e2ae528d917f07bb8ea4168c15208e422b53097f4aa58f6fad6bdd6816103200181815250507f126284aa426ddc13fdf8edb981a408d0ca86802c5a39a10027f8882ab0b51b0a816103400181815250507f1c86edd24723f29bccdc7b5a1d551f67ff024cb89826752bf8d10afa2e6e3610816103600181815250507f038a6379345bd97eccf8665568b0087075a5e18bcf0d591621cfd383a39009c2816103800181815250507f1c43b1c709f054950aac370a26eb60176db3943b0e6ebc70e9cb8ec6ace649b8816103a00181815250507f1749378140da4a78a025a79a32db7a84e64002290ce30e825be107e8843f7511816103c00181815250507f156523c0edcc6e1212dca66eae041b21e4834cd53bfa92e2e4104813a38f02f3816103e00181815250506060816000015182602001518360400151846060015185608001518660a001518760c001518860e001518961010001518a61012001518b61014001518c61016001516040516020016107799c9b9a999897969594939291906137a6565b604051602081830303815290604052905080826101800151836101a00151846101c001516040516020016107b094939291906138ed565b604051602081830303815290604052905080826101e00151836102000151846102200151856102400151866102600151876102800151886102a00151604051602001610803989796959493929190613937565b604051602081830303815290604052905080826102c00151836102e001518461030001518561032001516040516020016108419594939291906139c5565b60405160208183030381529060405290508082610340015160405160200161086a929190613a20565b604051602081830303815290604052905080826103600151604051602001610893929190613a20565b604051602081830303815290604052905080826103800151836103a001516040516020016108c393929190613a48565b604051602081830303815290604052905080826103c00151836103e001516040516020016108f393929190613a48565b6040516020818303038152906040529050809250505090565b600080600080600061091e8787611fb4565b80945081955082965083975050505050600061093b8888846124c4565b905060008060009050604051856000820152876040820152846060820152866020820152836101c082015261096e6109b9565b6109778b611b33565b6109808b611abe565b6109898b6116b8565b6109928b61110a565b61099b8b610e96565b6109a48b610b68565b61024081015191506102608101519250611fa3565b604051610280604051016109d38160106060850151611f44565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160017f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000010382089050806101e08401527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160017f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000103606085015108610a9c8360027f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000010383611f44565b90507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000017f2d5e098bb31e86271ccb415b196942d755b0a9c3f21dd9882fa3d63ab1000001820990507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001828209915060008401517f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000181840992507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000181840992508260c08601525050505050565b60405161028081017f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016020832006816040810192506102e085015181526103008501516020820152610bc08383610320880184611e94565b6101808401610bd58484610240890184611e94565b6101608501610be984610280890183611ef2565b8460408101955060018152600260208201528151604082015260408160608360076107d05a03fa506020810180517f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47038152610c4787838687611e13565b86604088019750610c628860608b01516102e08d0184611e59565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000017f21082ca216cbbf4e1c6e4f4594dd508c996dfbe1174efb98b11509c6e306460b60608b0151097f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018189099750610ce089896103208e0185611e94565b610cec89838889611e13565b6020870180517f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4703815286518a52602087015160208b01527f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c260408b01527f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed60608b01527f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b60808b01527f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa60a08b0152875160c08b0152602088015160e08b01527f29f4db6a002e1a48401896d7a9f0b75ef586b0f620354cc6e7fd3d76b8fbbeba6101008b01527f0babd511a6212e95bff7f68c26dc809f0d509d6a172ff783373307e1c8c64b4f6101208b01527f1322b3c7d588d4c29c598ad73bb1c901d656f71d542987298bb9dae57ca9a0206101408b01527f2b00609ffb2ba96524962916f77334f37fa376de415eef60d588f3e73f4e200c6101608b0152602060006101808c60086107d05a03fa6102408c015181166102408d015250505050505050505050505050565b6040516102806040510161022082015180604060020261020001808401604085015161018087015260608501516101a08701526102a0870151610160870152610ee88184608088016101808a01611e94565b610efb836102c089016101608901611ef2565b826102608701527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018484099250610f3b818460c088016101808a01611e94565b610f4e836101a089016101608901611ef2565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018484099250610f8a8286018461010088016101808a01611e94565b610f9d836101c089016101608901611ef2565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018484099250610fd98286018461014088016101808a01611e94565b610fec836101e089016101608901611ef2565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000184840992506110288286018461018088016101808a01611e94565b61103b8361020089016101608901611ef2565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018484099250611077828601846101c088016101808a01611e94565b61108a8361022089016101608901611ef2565b6103608701610200860160005b60028110156110fe577f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000187870995506110d885890187846101808d01611e94565b6110e786846101608c01611ef2565b602083019250604082019150600181019050611097565b50505050505050505050565b604051610280604051016467616d6d6181526060820151602082015260e082015160408201526101008201516060820152610120820151608082015261014082015160a0820152602083015160c0820152604083015160e08201526060830151610100820152608083015161012082015260a083015161014082015260c08301516101608201527f2f7b94f9dc526fbc1d8e1370d6b6f10a6009e6ada941b2c8cad0d06e549b93806101808201527f1fe7ffa093f6e2b74ba986216cd25af289d850f149ca42cfffd5fee39cf58f6e6101a08201527f10e43dd062004a72f3fe27cc9ec0e6e5285770503b38fe51a8eb47b57a1b5b926101c08201527f154168983f662a3c89f262764f02c3d1ddbdbe81e076da27af4113fbcd8f3f076101e08201526102007f166a79f77422f21b27fe6e4a9af7396553a283bbee4991f56ce2dd7ddc91031d818301527f032f3aef71c1c40021e262eafca25e6f32b7852455724b5ac25c31c6806c5974602082018301526040810190507f2c0b1a470e4c4d93b15694018d6a86b203838b79b1df0c94d68633b32cb648ac818301527f16b991574fa43b27e0f792a4867bccc6764984cfff62ef150f99491ba2bfed42602082018301526040810190506102a0840151818301526102c0840151602082018301526101a0840151604082018301526101c0840151606082018301526101e08401516080820183015261020084015160a0820183015261022084015160c0820183015260e081018201610360850160005b6002811015611360578151835260208201915060208301925060018101905061133c565b50601b6003600202601601602081026005019050602061022088018284890160026107d05a03fa507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001610220880151066102208801525050505050505050565b604051610280604051017f2e8b52204cfec9f1f7cfe087d2764e4cff1ae94770398ede924f3426abda262181527f0ad08138c9aec4a1b032a4cf1bade3820b8910d1d9bd00ea5745e533d87073a9602082015261142b604082016101a0850151836101208601611e59565b7f283268381a2d7762d34bda08dab9a860efe1d7de4620bb8fa3ab10881dcb847181527f148444d89a818a71b4ed6e46ac7bae2cab45b08a764541ac79d4890140459b12602082015261148c604082016101c0850151836101208601611e94565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016101c08401516101a0850151097e8e4c75053cf5d2a58d74c487b71b31fc5e411bd46f4c5119af15cf467b6d1082527f12478f415d87ed275bb3d54b74732eb816eb9c4b15be7ef40cfdf051a35b640c60208301526115156040830182846101208701611e94565b7f0f57ae74470e6b1a0619055e2e9dc285dc8f7821ee9ec6199348fd0bf184dca082527f1ea1df70b7ce97713803e12baa07d5494a2cfdc7e58e23d65b547d9f0244ba736020830152611576604083016101e0860151846101208701611e94565b7f0cea8e04274b47af132fc0efdee5cce84fe7e5b3169f6d39a380e0f0e25dc04d82527f10e4530103a22ec876368015644f184e651111915533118d19ce003fefe0964060208301526115d6604083018361012086016101208701611e13565b6103608401602060020261036001850160005b600281101561162b578151855260208201516020860152611614604086018451876101208a01611e94565b6020830192506040820191506001810190506115e9565b507f0a9cdac6cb3ea621ea8ef15c56737cc50f4d4e06e3215e98492473ed8274c7dd84527f16af555b9a3efa73c75fd67b3d271db6535f1a02f3acac9ee314139f40029ad160208501526116886040850188866101208901611e94565b610240860151845261026086015160208501526116ae6040850189866101208901611e94565b5050505050505050565b60405160208101516040820151606083015160008401517f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000184610280880151097f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000161020088015186097f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016101a0890151820890507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000185820890507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000161022089015187097f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016101c08a0151820890507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000186820890507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018284097f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000182820990507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000185820990507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001600580097f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001878a097f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016101a08d0151820895507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000189870895507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016005820994507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016101c08d0151860894507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000189860894507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000182820993507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016101e08d0151850893507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000189850893507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018587097f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018582099050807f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000010390507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000188820990507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160c08d015182089050611aaf81858f6113c0565b50505050505050505050505050565b604051600260100161028060405101611adc81836060860151611f44565b611aef8282610160880160e08801611e59565b611b0582610120870160e0870160e08801611e13565b611b17828260e0870160e08801611e59565b611b2c8260e0870160e0870160e08801611e13565b5050505050565b604051610280604051017f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160208301516102008501510981527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001604083015182510881527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016101a08401518251088152602081017f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160208401516102208601510981527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001604084015182510881527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016101c08501518251088152604082017f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160408501516101e08701510881527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001825184510983527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001815184510983527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001600085015184510983527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016102808601518451098352606083017f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016101c08601516102c08801510881527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001845182510881527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160c08601517f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000010382510881527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016101e08601516102a08801510983528251815114610240860152505050505050565b6040518251855260208301516020860152835160408601526020840151606086015260408260808760066107d05a03fa6102408201518116610240830152505050505050565b604051825185526020830151602086015283604086015260408260608760076107d05a03fa6102408201518116610240830152505050505050565b604051825185526020830151602086015283604086015260408560608760076107d05a03fa825160408701526020830151606087015260408360808860066107d05a03fa811690506102408201518116610240830152505050505050565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001838351097f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000181835108825250505050565b600060208452602080850152602060408501528160608501528260808501527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160a085015260208460c08660056107d05a03fa50835190509392505050565b508097505050505050505092915050565b600080600080600080600080604051611fcd8a8c612094565b80519450611fdb858c6123dd565b80519350611fe9848c612404565b80519250611ff7838c612442565b805191507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001850694507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001840693507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001830692507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001820691506124aa565b6040516467616d6d6181527f2f7b94f9dc526fbc1d8e1370d6b6f10a6009e6ada941b2c8cad0d06e549b938060208201527f1fe7ffa093f6e2b74ba986216cd25af289d850f149ca42cfffd5fee39cf58f6e60408201527f10e43dd062004a72f3fe27cc9ec0e6e5285770503b38fe51a8eb47b57a1b5b9260608201527f154168983f662a3c89f262764f02c3d1ddbdbe81e076da27af4113fbcd8f3f0760808201527f0a9cdac6cb3ea621ea8ef15c56737cc50f4d4e06e3215e98492473ed8274c7dd60a08201527f16af555b9a3efa73c75fd67b3d271db6535f1a02f3acac9ee314139f40029ad160c08201527f2e8b52204cfec9f1f7cfe087d2764e4cff1ae94770398ede924f3426abda262160e08201527f0ad08138c9aec4a1b032a4cf1bade3820b8910d1d9bd00ea5745e533d87073a96101008201527f283268381a2d7762d34bda08dab9a860efe1d7de4620bb8fa3ab10881dcb84716101208201527f148444d89a818a71b4ed6e46ac7bae2cab45b08a764541ac79d4890140459b126101408201527e8e4c75053cf5d2a58d74c487b71b31fc5e411bd46f4c5119af15cf467b6d106101608201527f12478f415d87ed275bb3d54b74732eb816eb9c4b15be7ef40cfdf051a35b640c6101808201527f0f57ae74470e6b1a0619055e2e9dc285dc8f7821ee9ec6199348fd0bf184dca06101a08201527f1ea1df70b7ce97713803e12baa07d5494a2cfdc7e58e23d65b547d9f0244ba736101c08201527f0cea8e04274b47af132fc0efdee5cce84fe7e5b3169f6d39a380e0f0e25dc04d6101e08201527f10e4530103a22ec876368015644f184e651111915533118d19ce003fefe0964061020082015260208301610220820160005b85518110156123375782518252602083019250602082019150600181019050612313565b50610360840160206002028101905060005b6002811015612377578151835260208201516020840152604083019250604082019150600181019050612349565b506020850151825260408501516020830152606085015160408301526080850151606083015260a0850151608083015260c085015160a083015260208651026102c50160406002028101905060208582601b880160026107d05a03fa5050505050505050565b604051636265746181528260208201526020816024601c840160026107d05a03fa50505050565b60405164616c7068618152826020820152610240820151604082015261026082015160608201526020816065601b840160026107d05a03fa50505050565b604051637a657461815282602082015260e082015160408201526101008201516060820152610120820151608082015261014082015160a082015261016082015160c082015261018082015160e082015260208160e4601c840160026107d05a03fa50505050565b508383838397509750975097505050505092959194509250565b60008060006124d8848651602088016124e3565b6040515190506128f0565b6040516124f1818486612572565b60008060005b85811015612564577f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001855185510991507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000182840892506020840193506020850194506001810190506124f7565b508160405152505050505050565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160017f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001036125c385601085612891565b087f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000017f2d5e098bb31e86271ccb415b196942d755b0a9c3f21dd9882fa3d63ab10000018209905060018460005b858110156126b7577f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001837f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000103860882527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000017f21082ca216cbbf4e1c6e4f4594dd508c996dfbe1174efb98b11509c6e306460b84099250602082019150600181019050612610565b506126c381868861277f565b8590506001915060005b85811015612776577f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001837f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001868551090982526020820191507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000017f21082ca216cbbf4e1c6e4f4594dd508c996dfbe1174efb98b11509c6e306460b840992506001810190506126cd565b50505050505050565b600183526000805b838110156127d55781850151828401517f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001818309905060208401935080848801525050600181019050612787565b50602081038201915080840193506128156020850160027f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001038651612891565b60005b848110156128895760208603955083517f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001875184098086527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000182850993506020860395505050600181019050612818565b505050505050565b600060208452602080850152602060408501528160608501528260808501527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160a085015260208460c08660056107d05a03fa50835190509392505050565b6128fe604051601086612891565b91507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160017f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000103830891506000600267ffffffffffffffff81111561296657612965613402565b5b6040519080825280602002602001820160405280156129945781602001602082028036833780820191505090505b5090506129a081612b19565b60606002806129af9190613ab0565b67ffffffffffffffff8111156129c8576129c7613402565b5b6040519080825280602002602001820160405280156129f65781602001602082028036833780820191505090505b509050612a038189612b35565b60005b6002811015612b0a576000612a7383836002612a229190613ab0565b81518110612a3357612a326136a3565b5b6020026020010151846001856002612a4b9190613ab0565b612a559190613af2565b81518110612a6657612a656136a3565b5b6020026020010151612b87565b90506000612aa7898b51878681518110612a9057612a8f6136a3565b5b6020026020010151612aa29190613af2565b612d09565b90507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000181830990507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001818708955050508080612b0290613b26565b915050612a06565b50829450505050509392505050565b6020810160038152602081019050600581526020810190505050565b60208201610360820160206002028101905060005b60028002811015612b80578151835260208301925060208201915081518352602083019250602082019150600181019050612b4a565b5050505050565b600080612b948484612f09565b905060005b6020811015612bf857806008612baf9190613ab0565b8282602f612bbd9190613b6e565b60308110612bce57612bcd6136a3565b5b602002015160ff16901b83612be39190613af2565b92508080612bf090613b26565b915050612b99565b507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000182612c259190613bd1565b9150600080600090505b6010811015612c8e57806008612c459190613ab0565b8382600f612c539190613b6e565b60308110612c6457612c636136a3565b5b602002015160ff16901b82612c799190613af2565b91508080612c8690613b26565b915050612c2f565b5060007f0e0a77c19a07df2f666ea36f7879462e36fc76959f60cd29ac96341c4ffffffb90507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000181830991507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001828508935050505092915050565b600080612d75565b600060405160208152602080820152602060408201528260608201528360808201527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160a08201526020600060c08360056107d05a03fa5060005191505092915050565b612d9f837f21082ca216cbbf4e1c6e4f4594dd508c996dfbe1174efb98b11509c6e306460b612d11565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001817f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000010386089350612df2601086612d11565b94507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160017f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000103860894507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000017f2d5e098bb31e86271ccb415b196942d755b0a9c3f21dd9882fa3d63ab100000182099050612eb060027f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000010385612d11565b93507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000184820990507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018582099150508091505092915050565b612f116133b0565b60006040518060400160405280600b81526020017f42534232322d506c6f6e6b00000000000000000000000000000000000000000081525090506060600080603090506000600b905060005b6040811015612f9d578484604051602001612f79929190613c45565b60405160208183030381529060405294508080612f9590613b26565b915050612f5d565b508388888585878a87604051602001612fbd989796959493929190613cb4565b60405160208183030381529060405293506000600285604051612fe09190613d3e565b602060405180830381855afa158015612ffd573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906130209190613d8b565b9050806001878460405160200161303a9493929190613dd9565b6040516020818303038152906040529450600060028660405161305d9190613d3e565b602060405180830381855afa15801561307a573d6000803e3d6000fd5b5050506040513d601f19601f8201168201806040525081019061309d9190613d8b565b905060005b60208110156130fc578181602081106130be576130bd6136a3565b5b1a60f81b60f81c8982603081106130d8576130d76136a3565b5b602002019060ff16908160ff168152505080806130f490613b26565b9150506130a2565b5080600060208110613111576131106136a3565b5b1a60f81b60f81c8260006020811061312c5761312b6136a3565b5b1a60f81b60f81c186040516020016131449190613e23565b60405160208183030381529060405295506000600190505b60208110156131d05786828260208110613179576131786136a3565b5b1a60f81b60f81c848360208110613193576131926136a3565b5b1a60f81b60f81c186040516020016131ac929190613c45565b604051602081830303815290604052965080806131c890613b26565b91505061315c565b5085600288856040516020016131e99493929190613e3e565b604051602081830303815290604052955060028660405161320a9190613d3e565b602060405180830381855afa158015613227573d6000803e3d6000fd5b5050506040513d601f19601f8201168201806040525081019061324a9190613d8b565b905060005b60108110156132b55781816020811061326b5761326a6136a3565b5b1a60f81b60f81c896020836132809190613af2565b60308110613291576132906136a3565b5b602002019060ff16908160ff168152505080806132ad90613b26565b91505061324f565b505050505050505092915050565b60405180610400016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b604051806106000160405280603090602082028036833780820191505090505090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61343a826133f1565b810181811067ffffffffffffffff8211171561345957613458613402565b5b80604052505050565b600061346c6133d3565b90506134788282613431565b919050565b600067ffffffffffffffff82111561349857613497613402565b5b6134a1826133f1565b9050602081019050919050565b82818337600083830152505050565b60006134d06134cb8461347d565b613462565b9050828152602081018484840111156134ec576134eb6133ec565b5b6134f78482856134ae565b509392505050565b600082601f830112613514576135136133e7565b5b81356135248482602086016134bd565b91505092915050565b600067ffffffffffffffff82111561354857613547613402565b5b602082029050602081019050919050565b600080fd5b6000819050919050565b6135718161355e565b811461357c57600080fd5b50565b60008135905061358e81613568565b92915050565b60006135a76135a28461352d565b613462565b905080838252602082019050602084028301858111156135ca576135c9613559565b5b835b818110156135f357806135df888261357f565b8452602084019350506020810190506135cc565b5050509392505050565b600082601f830112613612576136116133e7565b5b8135613622848260208601613594565b91505092915050565b60008060408385031215613642576136416133dd565b5b600083013567ffffffffffffffff8111156136605761365f6133e2565b5b61366c858286016134ff565b925050602083013567ffffffffffffffff81111561368d5761368c6133e2565b5b613699858286016135fd565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60008115159050919050565b6136e7816136d2565b82525050565b600060208201905061370260008301846136de565b92915050565b600082825260208201905092915050565b7f766572696669636174696f6e206661696c656421000000000000000000000000600082015250565b600061374f601483613708565b915061375a82613719565b602082019050919050565b6000602082019050818103600083015261377e81613742565b9050919050565b6000819050919050565b6137a061379b8261355e565b613785565b82525050565b60006137b2828f61378f565b6020820191506137c2828e61378f565b6020820191506137d2828d61378f565b6020820191506137e2828c61378f565b6020820191506137f2828b61378f565b602082019150613802828a61378f565b602082019150613812828961378f565b602082019150613822828861378f565b602082019150613832828761378f565b602082019150613842828661378f565b602082019150613852828561378f565b602082019150613862828461378f565b6020820191508190509d9c50505050505050505050505050565b600081519050919050565b600081905092915050565b60005b838110156138b0578082015181840152602081019050613895565b60008484015250505050565b60006138c78261387c565b6138d18185613887565b93506138e1818560208601613892565b80840191505092915050565b60006138f982876138bc565b9150613905828661378f565b602082019150613915828561378f565b602082019150613925828461378f565b60208201915081905095945050505050565b6000613943828b6138bc565b915061394f828a61378f565b60208201915061395f828961378f565b60208201915061396f828861378f565b60208201915061397f828761378f565b60208201915061398f828661378f565b60208201915061399f828561378f565b6020820191506139af828461378f565b6020820191508190509998505050505050505050565b60006139d182886138bc565b91506139dd828761378f565b6020820191506139ed828661378f565b6020820191506139fd828561378f565b602082019150613a0d828461378f565b6020820191508190509695505050505050565b6000613a2c82856138bc565b9150613a38828461378f565b6020820191508190509392505050565b6000613a5482866138bc565b9150613a60828561378f565b602082019150613a70828461378f565b602082019150819050949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000613abb8261355e565b9150613ac68361355e565b9250828202613ad48161355e565b91508282048414831517613aeb57613aea613a81565b5b5092915050565b6000613afd8261355e565b9150613b088361355e565b9250828201905080821115613b2057613b1f613a81565b5b92915050565b6000613b318261355e565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203613b6357613b62613a81565b5b600182019050919050565b6000613b798261355e565b9150613b848361355e565b9250828203905081811115613b9c57613b9b613a81565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000613bdc8261355e565b9150613be78361355e565b925082613bf757613bf6613ba2565b5b828206905092915050565b600060ff82169050919050565b60008160f81b9050919050565b6000613c2782613c0f565b9050919050565b613c3f613c3a82613c02565b613c1c565b82525050565b6000613c5182856138bc565b9150613c5d8284613c2e565b6001820191508190509392505050565b600081519050919050565b600081905092915050565b6000613c8e82613c6d565b613c988185613c78565b9350613ca8818560208601613892565b80840191505092915050565b6000613cc0828b6138bc565b9150613ccc828a61378f565b602082019150613cdc828961378f565b602082019150613cec8288613c2e565b600182019150613cfc8287613c2e565b600182019150613d0c8286613c2e565b600182019150613d1c8285613c83565b9150613d288284613c2e565b6001820191508190509998505050505050505050565b6000613d4a82846138bc565b915081905092915050565b6000819050919050565b613d6881613d55565b8114613d7357600080fd5b50565b600081519050613d8581613d5f565b92915050565b600060208284031215613da157613da06133dd565b5b6000613daf84828501613d76565b91505092915050565b6000819050919050565b613dd3613dce82613d55565b613db8565b82525050565b6000613de58287613dc2565b602082019150613df58286613c2e565b600182019150613e058285613c83565b9150613e118284613c2e565b60018201915081905095945050505050565b6000613e2f8284613c2e565b60018201915081905092915050565b6000613e4a82876138bc565b9150613e568286613c2e565b600182019150613e668285613c83565b9150613e728284613c2e565b6001820191508190509594505050505056fea264697066735822122001452bdfd0b8a642cf01eda1740d526a146e017585c0f05d42502bbdd9581caa64736f6c63430008130033"

// DeployContract deploys a new Ethereum contract, binding an instance of Contract to it.
func DeployContract(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Contract, error) {
	parsed, err := abi.JSON(strings.NewReader(ContractABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(ContractBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Contract{ContractCaller: ContractCaller{contract: contract}, ContractTransactor: ContractTransactor{contract: contract}, ContractFilterer: ContractFilterer{contract: contract}}, nil
}

// Contract is an auto generated Go binding around an Ethereum contract.
type Contract struct {
	ContractCaller     // Read-only binding to the contract
	ContractTransactor // Write-only binding to the contract
	ContractFilterer   // Log filterer for contract events
}

// ContractCaller is an auto generated read-only Go binding around an Ethereum contract.
type ContractCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ContractTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ContractFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ContractSession struct {
	Contract     *Contract         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ContractCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ContractCallerSession struct {
	Contract *ContractCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// ContractTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ContractTransactorSession struct {
	Contract     *ContractTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// ContractRaw is an auto generated low-level Go binding around an Ethereum contract.
type ContractRaw struct {
	Contract *Contract // Generic contract binding to access the raw methods on
}

// ContractCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ContractCallerRaw struct {
	Contract *ContractCaller // Generic read-only contract binding to access the raw methods on
}

// ContractTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ContractTransactorRaw struct {
	Contract *ContractTransactor // Generic write-only contract binding to access the raw methods on
}

// NewContract creates a new instance of Contract, bound to a specific deployed contract.
func NewContract(address common.Address, backend bind.ContractBackend) (*Contract, error) {
	contract, err := bindContract(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Contract{ContractCaller: ContractCaller{contract: contract}, ContractTransactor: ContractTransactor{contract: contract}, ContractFilterer: ContractFilterer{contract: contract}}, nil
}

// NewContractCaller creates a new read-only instance of Contract, bound to a specific deployed contract.
func NewContractCaller(address common.Address, caller bind.ContractCaller) (*ContractCaller, error) {
	contract, err := bindContract(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ContractCaller{contract: contract}, nil
}

// NewContractTransactor creates a new write-only instance of Contract, bound to a specific deployed contract.
func NewContractTransactor(address common.Address, transactor bind.ContractTransactor) (*ContractTransactor, error) {
	contract, err := bindContract(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ContractTransactor{contract: contract}, nil
}

// NewContractFilterer creates a new log filterer instance of Contract, bound to a specific deployed contract.
func NewContractFilterer(address common.Address, filterer bind.ContractFilterer) (*ContractFilterer, error) {
	contract, err := bindContract(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ContractFilterer{contract: contract}, nil
}

// bindContract binds a generic wrapper to an already deployed contract.
func bindContract(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ContractABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Contract *ContractRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Contract.Contract.ContractCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Contract *ContractRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Contract.Contract.ContractTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Contract *ContractRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Contract.Contract.ContractTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Contract *ContractCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Contract.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Contract *ContractTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Contract.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Contract *ContractTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Contract.Contract.contract.Transact(opts, method, params...)
}

// TestVerifier is a paid mutator transaction binding the contract method 0x8cbba7b7.
//
// Solidity: function test_verifier() returns()
func (_Contract *ContractTransactor) TestVerifier(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "test_verifier")
}

// TestVerifier is a paid mutator transaction binding the contract method 0x8cbba7b7.
//
// Solidity: function test_verifier() returns()
func (_Contract *ContractSession) TestVerifier() (*types.Transaction, error) {
	return _Contract.Contract.TestVerifier(&_Contract.TransactOpts)
}

// TestVerifier is a paid mutator transaction binding the contract method 0x8cbba7b7.
//
// Solidity: function test_verifier() returns()
func (_Contract *ContractTransactorSession) TestVerifier() (*types.Transaction, error) {
	return _Contract.Contract.TestVerifier(&_Contract.TransactOpts)
}

// TestVerifierGo is a paid mutator transaction binding the contract method 0xc383590a.
//
// Solidity: function test_verifier_go(bytes proof, uint256[] public_inputs) returns()
func (_Contract *ContractTransactor) TestVerifierGo(opts *bind.TransactOpts, proof []byte, public_inputs []*big.Int) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "test_verifier_go", proof, public_inputs)
}

// TestVerifierGo is a paid mutator transaction binding the contract method 0xc383590a.
//
// Solidity: function test_verifier_go(bytes proof, uint256[] public_inputs) returns()
func (_Contract *ContractSession) TestVerifierGo(proof []byte, public_inputs []*big.Int) (*types.Transaction, error) {
	return _Contract.Contract.TestVerifierGo(&_Contract.TransactOpts, proof, public_inputs)
}

// TestVerifierGo is a paid mutator transaction binding the contract method 0xc383590a.
//
// Solidity: function test_verifier_go(bytes proof, uint256[] public_inputs) returns()
func (_Contract *ContractTransactorSession) TestVerifierGo(proof []byte, public_inputs []*big.Int) (*types.Transaction, error) {
	return _Contract.Contract.TestVerifierGo(&_Contract.TransactOpts, proof, public_inputs)
}

// ContractPrintBoolIterator is returned from FilterPrintBool and is used to iterate over the raw logs and unpacked data for PrintBool events raised by the Contract contract.
type ContractPrintBoolIterator struct {
	Event *ContractPrintBool // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractPrintBoolIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractPrintBool)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractPrintBool)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractPrintBoolIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractPrintBoolIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractPrintBool represents a PrintBool event raised by the Contract contract.
type ContractPrintBool struct {
	A   bool
	Raw types.Log // Blockchain specific contextual infos
}

// FilterPrintBool is a free log retrieval operation binding the contract event 0x3e1a1345e360785a18ee3f9d25ba93d69ea5c3b5772b44df827662204209612c.
//
// Solidity: event PrintBool(bool a)
func (_Contract *ContractFilterer) FilterPrintBool(opts *bind.FilterOpts) (*ContractPrintBoolIterator, error) {

	logs, sub, err := _Contract.contract.FilterLogs(opts, "PrintBool")
	if err != nil {
		return nil, err
	}
	return &ContractPrintBoolIterator{contract: _Contract.contract, event: "PrintBool", logs: logs, sub: sub}, nil
}

// WatchPrintBool is a free log subscription operation binding the contract event 0x3e1a1345e360785a18ee3f9d25ba93d69ea5c3b5772b44df827662204209612c.
//
// Solidity: event PrintBool(bool a)
func (_Contract *ContractFilterer) WatchPrintBool(opts *bind.WatchOpts, sink chan<- *ContractPrintBool) (event.Subscription, error) {

	logs, sub, err := _Contract.contract.WatchLogs(opts, "PrintBool")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractPrintBool)
				if err := _Contract.contract.UnpackLog(event, "PrintBool", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePrintBool is a log parse operation binding the contract event 0x3e1a1345e360785a18ee3f9d25ba93d69ea5c3b5772b44df827662204209612c.
//
// Solidity: event PrintBool(bool a)
func (_Contract *ContractFilterer) ParsePrintBool(log types.Log) (*ContractPrintBool, error) {
	event := new(ContractPrintBool)
	if err := _Contract.contract.UnpackLog(event, "PrintBool", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
