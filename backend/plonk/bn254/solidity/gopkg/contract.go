// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package contract

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// ContractMetaData contains all meta data concerning the Contract contract.
var ContractMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"},{\"internalType\":\"uint256[]\",\"name\":\"public_inputs\",\"type\":\"uint256[]\"}],\"name\":\"Verify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b50612a81806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80637e4f7a8a14610030575b600080fd5b61004a60048036038101906100459190612994565b610060565b6040516100579190612a30565b60405180910390f35b60006040516102208101610074858561037d565b61007d866103d7565b610086876103f4565b600061009386868a6105cc565b905061009e81610962565b90506100aa81896109ca565b90506100b68189610a6a565b60608301517f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160017f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000010361010c85602085612854565b08806101a086015261011f84888a610ad8565b61012a85898d610e3f565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000182820891508161018088015261015f611279565b6101688c612384565b6101718c61230f565b61017a8c611f09565b6101838c61198d565b61018c8c611720565b6101958c6113ce565b6101e087015197506128c0565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f6572726f72206563206f7065726174696f6e00000000000000000000000000006044820152606481fd5b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f696e707574732061726520626967676572207468616e207200000000000000006044820152606481fd5b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f77726f6e672070726f6f662073697a65000000000000000000000000000000006044820152606481fd5b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f6f70656e696e677320626967676572207468616e2072000000000000000000006044820152606481fd5b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f6572726f722076657269667900000000000000000000000000000000000000006044820152606481fd5b600160005b828110156103c3577f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000184351082169150602084019350600181019050610382565b50806103d2576103d1610201565b5b505050565b6060600202610340018082146103f0576103ef610260565b5b5050565b60016102a082017f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000181351082169150610280830190507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000181351082169150610180830190507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001813510821691506101a0830190507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001813510821691506101c0830190507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001813510821691506101e0830190507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000181351082169150610200830190507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000181351082169150610260830190507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001813510821691506103408301905060005b60028110156105b8577f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000182351083169250602082019150600181019050610576565b50816105c7576105c66102bf565b5b505050565b600060405161022081016467616d6d6181527f2fed9f6759d2e7abc3dc5bdfb02b94d883c3a2812df3bea276eb375e0dd0b8f960208201527f2e103a0b2a94d3c928966a25508d14766784aaf1eaa65782db74d7d3e8b4bcb760408201527f0ffc01358fc422f30694c12a3a0fac33441ad53dd007a752f2bb444c29acc11560608201527f1cfa90ff6750463bc338a15cd5b333c1773fdf6c38ed2e65f5db336662ec2d8860808201527f20129c926006a4fbf8111c3ab5904333f52f3ae5963d6508df5e5a07661e080060a08201527f1ed3427826d9c36e9e315db451a967846f3e80e16e7219747b32c884183581e460c08201527f1d4926fa9192da553a4d2466d390ec4cd006b8b203dd93acf43dd0df70c9010860e08201527f1d0e301f1cbf3ba74d58fa5869093fc461d410ddf3ff2b322b1d8a2f3a8526576101008201527f2e553725f571f135455c1069eba77a6201de66fc675d8815fa1b582770c0e5696101208201527f2bf10798628d6a711bff7a85af8e180ee0f07b8ad7f43ffb2faa64a251b666676101408201527f18c56360ba3ee1d50e543455fff1de00d405500fe8bcd55b1de45134c74da1b06101608201527f240905b1102adcd4fc816755986fa0c87f520c9682c279d01dfbd25032a8b13a6101808201527f2e553725f571f135455c1069eba77a6201de66fc675d8815fa1b582770c0e5696101a08201527f047346da7ea435b89c50cb30d1f3404eb690ef06907d8a920c76277486c696e06101c08201527f18c56360ba3ee1d50e543455fff1de00d405500fe8bcd55b1de45134c74da1b06101e08201527f0c5b48c1d106c354bbcede60e911b795182f5dfae5af50bd1e24b9c6a5d44c0d6102008201527f2b3e93b7a400f06778d9ee958be1f0a82862c73398dd3980326f9192a2ce77786102208201527f15776658cbbac7c411a44482f167ff02dc8ea750ff8d69ec3b6377e21d1918486102408201527f18e74ea510dbe83b7d7d4adae2cfe618cdb31b7c0f6a4ada4d547f0dd3aa32f46102608201527f212856cd4b1e85cb57db1f85012cf0960108fcf60c159603cee3b962fd6ba0fd6102808201526102a081016020860280888337808201915060c0808784378083019250816102c50160406002028101905060208582601b880160025afa806109285761092761031e565b5b855197507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000188066040880152505050505050509392505050565b600060405161022060405101636265746181528360208201526020816024601c840160025afa806109965761099561031e565b5b815193507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000184066020840152505050919050565b600060405161022060405101606564616c70686182526020820186815260208101905061034086016002602002810190506002604002808284378083019250808401935060406102208901843760208585601b880160025afa80610a3157610a3061031e565b5b855197507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001880660008801525050505050505092915050565b60405161022060405101637a657461815283602082015260c0808401604083013760208160e4601c840160025afa80610aa657610aa561031e565b5b81517f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000181066060850152505050505050565b600060405160608101516101a082015186610af581888486610b73565b6000805b88811015610b66577f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001883584510991507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018288089650602083019250602088019750600181019050610af9565b5050505050509392505050565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000017f2ee12bff4a2813286a8dc388cd754d9a3ef2490635eba50cb9c2e5e750800001830960018560005b86811015610c64577f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001837f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000103860882527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000017f09c532c6306b93d29678200d47c0b2a99c18d51b838eeb1d3eed4c533bb512d084099250602082019150600181019050610bbd565b50610c70818789610d2d565b8690506001915060005b86811015610d23577f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001837f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001868551090982526020820191507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000017f09c532c6306b93d29678200d47c0b2a99c18d51b838eeb1d3eed4c533bb512d084099250600181019050610c7a565b5050505050505050565b600183526000805b83811015610d835781850151828401517f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001818309905060208401935080848801525050600181019050610d35565b5060208103820191508084019350610dc36020850160027f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001038651612854565b60005b84811015610e375760208603955083517f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001875184098086527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000182850993506020860395505050600181019050610dc6565b505050505050565b600060405160608101516101a08201516103408501602060020281019050600080610e708a60208501358535611051565b9150610e818a60038b018688610f11565b90507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018082840988089650604083019250610ec28a60208501358535611051565b9150610ed38a60078b018688610f11565b90507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000180828409880896506040830192505050505050509392505050565b6000610f3e85857f09c532c6306b93d29678200d47c0b2a99c18d51b838eeb1d3eed4c533bb512d0612854565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001817f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000103840894507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000017f2ee12bff4a2813286a8dc388cd754d9a3ef2490635eba50cb9c2e5e75080000182099050610ffa8660027f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000010387612854565b94507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000185820990507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001848209915050949350505050565b6000808452600060208501528160408501528260608501526000608085015360306081850153600060828501536042608385015360536084850153604260858501536032608685015360326087850153602d608885015360506089850153606c608a850153606f608b850153606e608c850153606b608d850153600b608e850153602084608f8660025afa806110ea576110e961031e565b5b8451600160208701536042602187015360536022870153604260238701536032602487015360326025870153602d602687015360506027870153606c6028870153606f6029870153606e602a870153606b602b870153600b602c870153602086602d8860025afa9150816111615761116061031e565b5b808651186020870152600260408701536042604187015360536042870153604260438701536032604487015360326045870153602d604687015360506047870153606c6048870153606f6049870153606e604a870153606b604b870153600b604c87015360208601602081602d8360025afa9250826111e3576111e261031e565b5b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001700100000000000000000000000000000000885109935060108701905060005b60108110156112425760008253600182019150600181019050611224565b5060108701517f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018186089450505050509392505050565b604051610220604051016101a08201517f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160017f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001036060850151086113028360027f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000010383612854565b90507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000017f2ee12bff4a2813286a8dc388cd754d9a3ef2490635eba50cb9c2e5e750800001820990507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001828209915060008401517f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000181840992507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000181840992508260808601525050505050565b60405161022081017f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016020832006816040810192506102c085013581526102e0850135602082015261142683836103008801846127ac565b610140840161143b84846102208901846127ac565b610120850161144f84610260890183612802565b8460408101955060018152600260208201528151604082015260408160608360075afa600081036114835761148261031e565b5b6020820180517f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd470381526114b988848788612664565b876040890198506114d48960608c01516102c08e018461271f565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000017f09c532c6306b93d29678200d47c0b2a99c18d51b838eeb1d3eed4c533bb512d060608c0151097f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001818a0998506115528a8a6103008f01856127ac565b61155e8a83898a612664565b6020880180517f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4703815287518b52602088015160208c01527f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c260408c01527f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed60608c01527f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b60808c01527f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa60a08c0152885160c08c0152602089015160e08c01527f14631dd7c0d717a818e69fe63ef796112dda2d71cf970bfba437bb046facbb2f6101008c01527f014781119f0cfedba66a6e253e858150ed8d4efcc6907ccea31db12cd4182eec6101208c01527f0e0cb3b6b364546528370cce104323b7bff57ec8bdb6cb72044482b8b0d4960d6101408c01527f1f0b4bf74a5fbfd6cf2887cfde1c3045e99419a15b757243dd263a4c9a71571d6101608c01526116e48b6116f3565b50505050505050505050505050565b604051602060006101808460085afa6000516101e083015180838316169150816101e08501525050505050565b604051610220604051016101c082015180604060020261020001808401604085015161014087015260608501516101608701526102808701356101208701526117728184608088016101408a01612756565b611785836102a089016101208901612802565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000184840992506117be818460c088016101408a01612756565b6117d18361018089016101208901612802565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001848409925061180d8286018461010088016101408a01612756565b611820836101a089016101208901612802565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001848409925061185c8286018461014088016101408a01612756565b61186f836101c089016101208901612802565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000184840992506118ab8286018461018088016101408a01612756565b6118be836101e089016101208901612802565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000184840992506118fa828601846101c088016101408a01612756565b61190d8361020089016101208901612802565b6103408701610200860160005b6002811015611981577f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001878709955061195b85890187846101408d01612756565b61196a86846101208c01612802565b60208301925060408201915060018101905061191a565b50505050505050505050565b604051610220604051016467616d6d6181526060820151602082015260a0820151604082015260c0820151606082015260e0820151608082015261010082015160a082015260c06000840160c08301377f2fed9f6759d2e7abc3dc5bdfb02b94d883c3a2812df3bea276eb375e0dd0b8f96101808201527f2e103a0b2a94d3c928966a25508d14766784aaf1eaa65782db74d7d3e8b4bcb76101a08201527f0ffc01358fc422f30694c12a3a0fac33441ad53dd007a752f2bb444c29acc1156101c08201527f1cfa90ff6750463bc338a15cd5b333c1773fdf6c38ed2e65f5db336662ec2d886101e08201526102007f2b3e93b7a400f06778d9ee958be1f0a82862c73398dd3980326f9192a2ce7778818301527f15776658cbbac7c411a44482f167ff02dc8ea750ff8d69ec3b6377e21d191848602082018301526040810190507f18e74ea510dbe83b7d7d4adae2cfe618cdb31b7c0f6a4ada4d547f0dd3aa32f4818301527f212856cd4b1e85cb57db1f85012cf0960108fcf60c159603cee3b962fd6ba0fd60208201830152604081019050610280840135818301526102a084013560208201830152610180840135604082018301526101a0840135606082018301526101c0840135608082018301526101e084013560a0820183015261020084013560c0820183015260e081018201610340850160005b6002811015611bac5781358352602082019150602083019250600181019050611b88565b50601b600360020260160160208102600501905060206101c088018284890160025afa60008103611be057611bdf61031e565b5b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016101c0890151066101c0890152505050505050505050565b604051610220604051017f1d4926fa9192da553a4d2466d390ec4cd006b8b203dd93acf43dd0df70c9010881527f1d0e301f1cbf3ba74d58fa5869093fc461d410ddf3ff2b322b1d8a2f3a8526576020820152611c83604082016101808501358360e086016126e8565b7f2e553725f571f135455c1069eba77a6201de66fc675d8815fa1b582770c0e56981527f2bf10798628d6a711bff7a85af8e180ee0f07b8ad7f43ffb2faa64a251b666676020820152611ce3604082016101a08501358360e08601612756565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016101a0840135610180850135097f18c56360ba3ee1d50e543455fff1de00d405500fe8bcd55b1de45134c74da1b082527f240905b1102adcd4fc816755986fa0c87f520c9682c279d01dfbd25032a8b13a6020830152611d6c60408301828460e08701612756565b7f2e553725f571f135455c1069eba77a6201de66fc675d8815fa1b582770c0e56982527f047346da7ea435b89c50cb30d1f3404eb690ef06907d8a920c76277486c696e06020830152611dcc604083016101c08601358460e08701612756565b7f18c56360ba3ee1d50e543455fff1de00d405500fe8bcd55b1de45134c74da1b082527f0c5b48c1d106c354bbcede60e911b795182f5dfae5af50bd1e24b9c6a5d44c0d6020830152611e2a604083018360e0860160e08701612664565b6103408401602060020261034001850160005b6002811015611e7e578135855260208201356020860152611e676040860184358760e08a01612756565b602083019250604082019150600181019050611e3d565b507f20129c926006a4fbf8111c3ab5904333f52f3ae5963d6508df5e5a07661e080084527f1ed3427826d9c36e9e315db451a967846f3e80e16e7219747b32c884183581e46020850152611eda60408501888660e08901612756565b61022086013584526102408601356020850152611eff60408501898660e08901612756565b5050505050505050565b60405160208101516040820151606083015160008401517f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000184610260880135097f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016101e088013586097f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001610180890135820890507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000185820890507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000161020089013587097f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016101a08a0135820890507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000186820890507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018284097f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000182820990507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000185820990507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001600580097f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001878a097f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016101808d0135820895507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000189870895507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016005820994507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016101a08d0135860894507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000189860894507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000182820993507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016101c08d0135850893507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000189850893507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018587097f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018582099050807f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000010390507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000188820990507f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160808d01518208905061230081858f611c19565b50505050505050505050505050565b60405160026020016102206040510161232d81836060860151612854565b6123408282610140880160a0880161271f565b61235682610100870160a0870160a088016126a6565b612368828260a0870160a088016126e8565b61237d8260c0870160a0870160a088016126a6565b5050505050565b604051610220604051017f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160208301516101e08501350981527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001604083015182510881527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016101808401358251088152602081017f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160208401516102008601350981527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001604084015182510881527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016101a08501358251088152604082017f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160408501516101c08701350881527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001825184510983527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001815184510983527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001600085015184510983527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016102608601358451098352606083017f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016101808601516102a08801350881527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001845182510881527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160808601517f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000010382510881527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016101a086015161028088013509835282518151146101e0860152505050505050565b6040518251855260208301516020860152835160408601526020840151606086015260408260808760065afa8061269e5761269d6101a2565b5b505050505050565b6040518251855260208301516020860152833560408601526020840135606086015260408260808760065afa806126e0576126df6101a2565b5b505050505050565b604051825185526020830151602086015283604086015260408260608760075afa80612717576127166101a2565b5b505050505050565b604051823585526020830135602086015283604086015260408260608760075afa8061274e5761274d6101a2565b5b505050505050565b604051825185526020830151602086015283604086015260408560608760075afa825160408701526020830151606087015260408360808860065afa81169050806127a4576127a36101a2565b5b505050505050565b604051823585526020830135602086015283604086015260408560608760075afa825160408701526020830151606087015260408360808860065afa81169050806127fa576127f96101a2565b5b505050505050565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001838335097f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000181835108825250505050565b600060208452602080850152602060408501528160608501528260808501527f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000160a085015260208460c08660055afa600081036128b4576128b361031e565b5b84519150509392505050565b50505050505050949350505050565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f8401126128fe576128fd6128d9565b5b8235905067ffffffffffffffff81111561291b5761291a6128de565b5b602083019150836001820283011115612937576129366128e3565b5b9250929050565b60008083601f840112612954576129536128d9565b5b8235905067ffffffffffffffff811115612971576129706128de565b5b60208301915083602082028301111561298d5761298c6128e3565b5b9250929050565b600080600080604085870312156129ae576129ad6128cf565b5b600085013567ffffffffffffffff8111156129cc576129cb6128d4565b5b6129d8878288016128e8565b9450945050602085013567ffffffffffffffff8111156129fb576129fa6128d4565b5b612a078782880161293e565b925092505092959194509250565b60008115159050919050565b612a2a81612a15565b82525050565b6000602082019050612a456000830184612a21565b9291505056fea26469706673582212206230c354dbe95a357f543c980b1fddf50437279fe43363327d9f0a32f864247264736f6c63430008130033",
}

// ContractABI is the input ABI used to generate the binding from.
// Deprecated: Use ContractMetaData.ABI instead.
var ContractABI = ContractMetaData.ABI

// ContractBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ContractMetaData.Bin instead.
var ContractBin = ContractMetaData.Bin

// DeployContract deploys a new Ethereum contract, binding an instance of Contract to it.
func DeployContract(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Contract, error) {
	parsed, err := ContractMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ContractBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Contract{ContractCaller: ContractCaller{contract: contract}, ContractTransactor: ContractTransactor{contract: contract}, ContractFilterer: ContractFilterer{contract: contract}}, nil
}

// Contract is an auto generated Go binding around an Ethereum contract.
type Contract struct {
	ContractCaller     // Read-only binding to the contract
	ContractTransactor // Write-only binding to the contract
	ContractFilterer   // Log filterer for contract events
}

// ContractCaller is an auto generated read-only Go binding around an Ethereum contract.
type ContractCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ContractTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ContractFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ContractSession struct {
	Contract     *Contract         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ContractCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ContractCallerSession struct {
	Contract *ContractCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// ContractTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ContractTransactorSession struct {
	Contract     *ContractTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// ContractRaw is an auto generated low-level Go binding around an Ethereum contract.
type ContractRaw struct {
	Contract *Contract // Generic contract binding to access the raw methods on
}

// ContractCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ContractCallerRaw struct {
	Contract *ContractCaller // Generic read-only contract binding to access the raw methods on
}

// ContractTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ContractTransactorRaw struct {
	Contract *ContractTransactor // Generic write-only contract binding to access the raw methods on
}

// NewContract creates a new instance of Contract, bound to a specific deployed contract.
func NewContract(address common.Address, backend bind.ContractBackend) (*Contract, error) {
	contract, err := bindContract(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Contract{ContractCaller: ContractCaller{contract: contract}, ContractTransactor: ContractTransactor{contract: contract}, ContractFilterer: ContractFilterer{contract: contract}}, nil
}

// NewContractCaller creates a new read-only instance of Contract, bound to a specific deployed contract.
func NewContractCaller(address common.Address, caller bind.ContractCaller) (*ContractCaller, error) {
	contract, err := bindContract(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ContractCaller{contract: contract}, nil
}

// NewContractTransactor creates a new write-only instance of Contract, bound to a specific deployed contract.
func NewContractTransactor(address common.Address, transactor bind.ContractTransactor) (*ContractTransactor, error) {
	contract, err := bindContract(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ContractTransactor{contract: contract}, nil
}

// NewContractFilterer creates a new log filterer instance of Contract, bound to a specific deployed contract.
func NewContractFilterer(address common.Address, filterer bind.ContractFilterer) (*ContractFilterer, error) {
	contract, err := bindContract(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ContractFilterer{contract: contract}, nil
}

// bindContract binds a generic wrapper to an already deployed contract.
func bindContract(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ContractMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Contract *ContractRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Contract.Contract.ContractCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Contract *ContractRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Contract.Contract.ContractTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Contract *ContractRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Contract.Contract.ContractTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Contract *ContractCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Contract.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Contract *ContractTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Contract.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Contract *ContractTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Contract.Contract.contract.Transact(opts, method, params...)
}

// Verify is a free data retrieval call binding the contract method 0x7e4f7a8a.
//
// Solidity: function Verify(bytes proof, uint256[] public_inputs) view returns(bool success)
func (_Contract *ContractCaller) Verify(opts *bind.CallOpts, proof []byte, public_inputs []*big.Int) (bool, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "Verify", proof, public_inputs)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Verify is a free data retrieval call binding the contract method 0x7e4f7a8a.
//
// Solidity: function Verify(bytes proof, uint256[] public_inputs) view returns(bool success)
func (_Contract *ContractSession) Verify(proof []byte, public_inputs []*big.Int) (bool, error) {
	return _Contract.Contract.Verify(&_Contract.CallOpts, proof, public_inputs)
}

// Verify is a free data retrieval call binding the contract method 0x7e4f7a8a.
//
// Solidity: function Verify(bytes proof, uint256[] public_inputs) view returns(bool success)
func (_Contract *ContractCallerSession) Verify(proof []byte, public_inputs []*big.Int) (bool, error) {
	return _Contract.Contract.Verify(&_Contract.CallOpts, proof, public_inputs)
}
