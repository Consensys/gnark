Hi Oana,
1 - it refers to this https://eprint.iacr.org/2022/1072
2 - BSB2 for plonk doesn't introduce a custom gate but extends the permutation argument, we made a little modification to add a custom gate instead of complexifying the permutation argument (see the pdf that I sent)
3 - the goal of the custom gate is to perform Fiat Shamir (FS) efficiently inside of a circuit. To perform the FS normally we hash the transcript inside of the circuit but it consumes a lot of constraints. The goal of the custom is to circumvent that. The column of wires associated to the custom gate is the list of wires one commits to. The gate is in fact a selector for those wires. The gate column containss 0 and 1s only. The verifier hashes the commitment to the wire column, and get the FS challenge, that he uses as a public input. The gate ensures that the commitment contains the correct wires. The gate is taken in account in the final equation that is verified so that the verifier knows that the prover didn't cheat.
4 - the only difference is that we use the constant term everywhere while in plonk they use it only for the public inputs
5 - No the full and fulllarge both use the custom gate, it's the underlying circuit which is different (in the contracts you see the constants vk_selector_commitments_commit_api_<i>_<x,y>, the commit_api variables are linked to the custom gate)
6 - the field is the scalar field of bn254, KZG yes, no accumulation, no folding, no nothing the only modification is the custom gate. We differ from the paper in 2 places also: to fold the quotient, we use h_1(X) + X^(n+2)h_2(X)+X^(2n+4)h_3(X) while in the paper it's h_1+X^nh_2+X^(2n)h_3 and the degrees of the h_i vary accordingly, and in the linearised polynomial we substract the prover's ccontribution of the permutation and in the paper they add it (for the final quotient I used the negation of the copy constraint contribution, it doesn't affect anything)
7 - no ? Where did you get that ?
8 - no the gnark code for plonk has not been audited
9 - Yes the real verifier has been deployed. Grant optimised the gas consumption this week, and it's probably this version that will be used (for the exact contracts contact @Grant)
10 - cf 9
11 - no other special cases or references
