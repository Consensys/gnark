package main

import (
	"context"
	"crypto/ecdsa"
	"fmt"
	"log"
	"math/big"
	"os"
	"strings"

	"github.com/consensys/gnark-crypto/ecc/bn254/fr"
	bn254plonk "github.com/consensys/gnark/backend/plonk/bn254"
	contract "github.com/consensys/gnark/backend/plonk/bn254/solidity/gopkg"
	"github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/accounts/abi/bind/backends"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core"
	"github.com/ethereum/go-ethereum/crypto"
)

func checkError(err error) {
	if err != nil {
		fmt.Println(err)
		os.Exit(-1)
	}
}

func createSimulatedBackend(privateKey *ecdsa.PrivateKey) (*backends.SimulatedBackend, *bind.TransactOpts, error) {

	auth, err := bind.NewKeyedTransactorWithChainID(privateKey, big.NewInt(1337))
	if err != nil {
		return nil, nil, err
	}

	balance := new(big.Int)
	balance.SetString("10000000000000000000", 10) // 10 eth in wei

	address := auth.From
	genesisAlloc := map[common.Address]core.GenesisAccount{
		address: {
			Balance: balance,
		},
	}

	// create simulated backend & deploy the contract
	blockGasLimit := uint64(14712388)
	// blockGasLimit := uint64(1000000)
	client := backends.NewSimulatedBackend(genesisAlloc, blockGasLimit)

	return client, auth, nil

}

func getTransactionOpts(privateKey *ecdsa.PrivateKey, auth *bind.TransactOpts, client *backends.SimulatedBackend) (*bind.TransactOpts, error) {

	fromAddress := crypto.PubkeyToAddress(privateKey.PublicKey)
	nonce, err := client.PendingNonceAt(context.Background(), fromAddress)
	if err != nil {
		return nil, err
	}

	gasprice, err := client.SuggestGasPrice(context.Background())
	if err != nil {
		return nil, err
	}

	auth.Nonce = big.NewInt(int64(nonce))
	auth.Value = big.NewInt(0)
	// auth.GasLimit = uint64(1000000)
	auth.GasLimit = uint64(1000000)
	auth.GasPrice = gasprice

	return auth, nil

}

// assembly {
// 	if gt(test, 0) {
// 	  let ptError := mload(0x40)
// 	  mstore(ptError, 0x08c379a000000000000000000000000000000000000000000000000000000000)
// 	  mstore(add(ptError, 0x4), 0x20)
// 	  mstore(add(ptError, 0x24), 0x14)
// 	  mstore(add(ptError, 0x44), "error staticcall 0x5")
// 	  revert(ptError, 0x64)
// 	}
//   }

func main() {

	// create account
	privateKey, err := crypto.GenerateKey()
	if err != nil {
		log.Fatal(err)
	}

	// create simulated backend
	client, auth, err := createSimulatedBackend(privateKey)
	checkError(err)

	// deploy the contract
	contractAddress, _, instance, err := contract.DeployContract(auth, client)
	checkError(err)
	client.Commit()

	// read proof, vk
	var proof bn254plonk.Proof
	fproof, err := os.Open("proof")
	checkError(err)
	proof.ReadFrom(fproof)
	fproof.Close()

	var vk bn254plonk.VerifyingKey
	fvk, err := os.Open("vk")
	checkError(err)
	vk.ReadFrom(fvk)
	fvk.Close()

	// zkevm stuff
	// ss := []byte{0x01, 0x57, 0xfe, 0x0c, 0x48, 0x80, 0xde, 0x3a, 0x58, 0xf6, 0xab, 0xf4, 0x7e, 0x78, 0x62, 0xc6, 0xaf, 0x22, 0x38, 0x3f, 0x49, 0xa6, 0x86, 0x07, 0xfe, 0x8c, 0x21, 0x9a, 0x9f, 0x1c, 0xf8, 0x3c, 0x1d, 0x51, 0x56, 0x44, 0xf7, 0x76, 0xd6, 0x21, 0x43, 0x1a, 0x59, 0xfa, 0xde, 0xca, 0x6f, 0x9d, 0xaf, 0x42, 0x35, 0x0f, 0xcd, 0x72, 0x51, 0xa6, 0xc2, 0x40, 0xc9, 0x9f, 0xaa, 0xd3, 0xc6, 0x7f, 0x11, 0x1c, 0xa8, 0xf4, 0x92, 0x0a, 0xfa, 0x73, 0xd4, 0xd3, 0x87, 0x87, 0x93, 0x04, 0x51, 0x80, 0xa1, 0x01, 0x91, 0x52, 0xba, 0x94, 0xe6, 0xfb, 0xf9, 0x68, 0x82, 0x1f, 0xd9, 0x29, 0xff, 0xab, 0x00, 0x3e, 0x15, 0x29, 0x2f, 0x00, 0x6f, 0x2e, 0x95, 0xcb, 0xc2, 0xe5, 0x03, 0x5c, 0xff, 0x9d, 0x14, 0xa9, 0xeb, 0xc8, 0xdf, 0xc4, 0x2e, 0xc4, 0x57, 0x44, 0xa5, 0xdd, 0x1e, 0xe9, 0xc6, 0x5c, 0x09, 0xb5, 0x4f, 0xce, 0x05, 0x3c, 0xce, 0x01, 0xa7, 0x3f, 0xed, 0xb9, 0xb3, 0x7c, 0xfb, 0xd3, 0xdd, 0x1b, 0x29, 0xca, 0x44, 0xc1, 0xff, 0x33, 0xc1, 0x5e, 0x72, 0x35, 0x4f, 0xe5, 0x03, 0xf5, 0x09, 0x1b, 0x04, 0x4c, 0x67, 0x75, 0x7f, 0x81, 0x69, 0x0f, 0xaa, 0xbb, 0x00, 0x48, 0xf1, 0xc8, 0xb2, 0xa8, 0xe1, 0x13, 0x9b, 0x2d, 0x9a, 0x99, 0xa8, 0x16, 0x13, 0x14, 0xb5, 0xe0, 0x8b, 0x7c, 0x2a, 0xd3, 0x27, 0xba, 0xc6, 0xd8, 0x78, 0x02, 0xc2, 0x1b, 0xe4, 0x06, 0x9e, 0x7c, 0xb9, 0x9b, 0xa4, 0x63, 0x00, 0x24, 0xd6, 0x7a, 0xd3, 0xc6, 0x6c, 0x0e, 0xf1, 0xb0, 0x6a, 0x7d, 0x75, 0x95, 0x10, 0x68, 0xbd, 0x37, 0x15, 0x72, 0xbf, 0x1d, 0xc7, 0xb8, 0x9f, 0x94, 0x89, 0x4b, 0x9b, 0x10, 0x36, 0x23, 0x1e, 0x3d, 0x14, 0x45, 0x18, 0x76, 0xdb, 0xa6, 0xd2, 0x78, 0xb5, 0xb9, 0xc4, 0x1e, 0x2b, 0x69, 0x5b, 0x40, 0xba, 0x03, 0x07, 0xfe, 0x78, 0x0c, 0x3d, 0x5d, 0xd2, 0xeb, 0xca, 0x31, 0x3c, 0x42, 0x3c, 0x26, 0x55, 0x9d, 0x8e, 0xb2, 0x0b, 0x21, 0x92, 0x8b, 0x1c, 0x3d, 0xcc, 0x3c, 0x03, 0x4b, 0x61, 0x32, 0xb2, 0x14, 0xfc, 0xb6, 0x7d, 0xe2, 0x7c, 0xff, 0xc5, 0x75, 0xcf, 0x26, 0xf8, 0xfe, 0x3b, 0x50, 0xac, 0x78, 0xe1, 0x05, 0x06, 0xeb, 0xd7, 0x37, 0x03, 0x45, 0x89, 0xee, 0x29, 0xd8, 0x9b, 0xdc, 0x3e, 0x97, 0x50, 0x7d, 0xcd, 0xd3, 0xb5, 0xe9, 0x13, 0xad, 0xa5, 0xfa, 0xff, 0x72, 0x72, 0xc5, 0xf0, 0xc1, 0xfe, 0x9c, 0xcd, 0x22, 0xc9, 0x4f, 0x6e, 0xc5, 0xc8, 0x7e, 0x00, 0xff, 0xf7, 0x15, 0xb1, 0x1b, 0xf5, 0x5d, 0xf2, 0x76, 0x44, 0x6e, 0x8e, 0xd5, 0xb0, 0x32, 0xdf, 0x9e, 0xbb, 0xfd, 0x93, 0xb1, 0x3b, 0xfd, 0x0c, 0xd6, 0xa8, 0x28, 0xa2, 0x94, 0x7c, 0xf3, 0x10, 0x41, 0x04, 0x14, 0xf8, 0x29, 0x8b, 0x75, 0x39, 0x9d, 0xec, 0xb9, 0xf7, 0xa0, 0x59, 0xa0, 0x17, 0x09, 0x2d, 0x27, 0xf1, 0xb1, 0x53, 0x6c, 0xcc, 0x5b, 0x9e, 0xd4, 0xd3, 0x49, 0x50, 0xf8, 0x2c, 0x3e, 0x8e, 0x90, 0x67, 0xfe, 0x5d, 0xcc, 0x97, 0x70, 0xd9, 0x5b, 0xee, 0x00, 0x3b, 0x0f, 0xf8, 0xb8, 0x62, 0x3a, 0x8f, 0x4e, 0x79, 0x88, 0xc1, 0x10, 0x4d, 0xb5, 0xe0, 0xa4, 0xc8, 0xa4, 0x0f, 0x23, 0x32, 0x25, 0x3b, 0x2b, 0x7b, 0x52, 0x12, 0xa6, 0x29, 0x23, 0x3c, 0x78, 0xeb, 0x6e, 0xec, 0x52, 0x78, 0xd3, 0x19, 0x6d, 0xc2, 0x89, 0xd1, 0xa5, 0x8d, 0xdc, 0x77, 0x0f, 0x5f, 0xc3, 0x12, 0x57, 0x17, 0xc3, 0x52, 0xa0, 0x36, 0x6c, 0x38, 0xdb, 0xba, 0xbe, 0x79, 0x65, 0x4f, 0x06, 0xa7, 0xd0, 0xc0, 0x58, 0x20, 0xb7, 0xe5, 0x4b, 0x9b, 0xb9, 0x0b, 0xa3, 0x6a, 0xcf, 0xac, 0xc1, 0x08, 0xd9, 0x71, 0xd4, 0xe2, 0xdd, 0x88, 0x83, 0x8f, 0x88, 0x7a, 0x8e, 0xa5, 0xe2, 0x73, 0xba, 0x4f, 0x1a, 0x15, 0x5c, 0xaa, 0xde, 0x8e, 0x45, 0x21, 0xf9, 0x40, 0x6f, 0x59, 0xb6, 0x58, 0x3e, 0x1b, 0x48, 0x1e, 0xcf, 0x0f, 0x19, 0x8a, 0x63, 0xbd, 0x25, 0x99, 0xc1, 0x93, 0x81, 0xf6, 0x5c, 0xda, 0xb4, 0xe4, 0xc6, 0x50, 0x76, 0xe6, 0x22, 0xb1, 0xf5, 0xcd, 0x8d, 0x91, 0xb0, 0x15, 0xa4, 0x1e, 0x4a, 0x5d, 0x30, 0x0c, 0xb9, 0xe9, 0x0e, 0x38, 0x93, 0x95, 0x72, 0xcf, 0xc1, 0x38, 0xf0, 0x37, 0x8c, 0x8a, 0x52, 0x23, 0x5e, 0x3d, 0x9e, 0x32, 0xb7, 0x43, 0x58, 0x2a, 0xc5, 0xfd, 0x91, 0x11, 0xe0, 0xa8, 0x86, 0x92, 0xa5, 0x88, 0xee, 0xdb, 0x99, 0xda, 0xea, 0x35, 0xb2, 0x7c, 0x23, 0xa4, 0x36, 0xdd, 0x1f, 0x50, 0xc0, 0x95, 0x68, 0x67, 0x5a, 0x7d, 0xaa, 0x11, 0x20, 0xc9, 0x51, 0x08, 0xfb, 0xb7, 0x49, 0x66, 0xc3, 0x36, 0x8c, 0xb9, 0xea, 0xe9, 0x7a, 0x60, 0x71, 0xdf, 0x33, 0x4e, 0x2f, 0x40, 0x83, 0xf0, 0x2a, 0x7c, 0x54, 0xea, 0x82, 0xc5, 0xad, 0x81, 0x79, 0x57, 0x7c, 0x0a, 0xcb, 0xc2, 0xf5, 0xee, 0x9e, 0x96, 0xc8, 0xe7, 0x69, 0xb4, 0xbc, 0x07, 0x11, 0xc1, 0x85, 0xf2, 0x64, 0xe7, 0x00, 0x55, 0xa5, 0xe3, 0x69, 0xba, 0x18, 0x43, 0x67, 0x9a, 0x4f, 0xed, 0x6a, 0x1d, 0x3b, 0x2b, 0xbe, 0xaa, 0xc0, 0xf0, 0xf2, 0xd7, 0xe3, 0x89, 0x3d, 0x68, 0x0a, 0xb2, 0x82, 0x11, 0x7d, 0x48, 0xf0, 0x01, 0x04, 0x03, 0x75, 0x68, 0x19, 0x1a, 0x2f, 0x9b, 0xbc, 0xd2, 0x16, 0x1d, 0x08, 0x51, 0x35, 0x9c, 0xbf, 0xb3, 0x91, 0x9f, 0x20, 0x81, 0x9d, 0xc7, 0x7b, 0x45, 0xa5, 0xca, 0x73, 0x13, 0xd0, 0xd2, 0x9b, 0x54, 0x94, 0x19, 0x4d, 0x1a, 0x2f, 0x06, 0x18, 0xba, 0x17, 0x0d, 0xfb, 0x5e, 0x16, 0x33, 0xe9, 0x26, 0x20, 0x9f, 0x6e, 0x67, 0x79, 0x84, 0x7a, 0xa9, 0x0b, 0xe3, 0xfe, 0x4f, 0x50, 0xab, 0xce, 0x11, 0x93, 0x98, 0x11, 0x7e, 0xf7, 0x25, 0x3c, 0x5b, 0xa8, 0x23, 0x65, 0x79, 0xca, 0xcb, 0x1c, 0x79, 0x20, 0x93, 0xc0, 0xbe, 0x3f, 0xc4, 0x4c, 0xb3, 0xbb, 0x59, 0x11, 0x06, 0x1f, 0xa3, 0x92, 0x73, 0x39, 0x09, 0xe9, 0xcd, 0xfd, 0xfa, 0x06, 0x6c, 0x9e, 0x04, 0xec, 0x3a, 0xab, 0xf3, 0xbd, 0x08, 0x86, 0x00, 0x2d, 0xa3, 0x79, 0xb0, 0x96, 0xf1, 0x84, 0xc0, 0xc8, 0x24, 0x5c, 0xc6, 0x84, 0x6c, 0xa9, 0x4b, 0x70, 0xc6, 0x1c, 0x51, 0xa1, 0x0c, 0x4f, 0x23, 0x70, 0x5b, 0x50, 0x49, 0xf8, 0x6b, 0x1a, 0xaa, 0xfa, 0x55, 0x53, 0xb3, 0x36, 0xef, 0x9f, 0xc7, 0x52, 0x8e, 0x47, 0x28, 0x03, 0x6b, 0x7b, 0xce, 0x1e, 0x28, 0x00, 0xa0, 0x78, 0xa3, 0xed, 0x2d, 0x43, 0x09, 0x61, 0xdf, 0xd2, 0x2b, 0xad, 0xb8, 0xce, 0x83, 0xa0, 0x0f, 0x29, 0x4c, 0x70, 0x56, 0x3a, 0xe6, 0x81, 0xe7, 0x19, 0xa3, 0x6b, 0xb3, 0x9e, 0x00, 0x0b, 0xb0, 0x1a, 0x8e, 0x52, 0x1e, 0xa5, 0x42, 0x44, 0xf5, 0xe5, 0xcf, 0xc5, 0x78, 0xb4, 0xf1, 0x37, 0x0a, 0x2b, 0xb1, 0xda, 0x07, 0xc1, 0x1f, 0x39, 0xdc, 0x04, 0xe8, 0x1a, 0xf6, 0x56, 0xf4, 0x0f, 0xe3, 0x6c, 0xda, 0x86, 0x1c, 0xd8, 0x86, 0xde, 0x91, 0x11, 0x67, 0xb7, 0xe1, 0x47, 0x9c, 0x76, 0x18, 0x38, 0xca, 0xc2, 0x85, 0x8d, 0x67, 0x9c, 0xb3, 0x16, 0x55, 0x0a, 0x7b, 0x33, 0x88, 0x37, 0x1b, 0x71, 0xbe, 0x0e, 0x1f, 0xc3, 0x48, 0xd2, 0x07, 0x69, 0xab, 0x31, 0x2e, 0x7c, 0xfb, 0x06, 0x7a, 0xd0, 0x8c, 0x56, 0x8b, 0xc8, 0x8e, 0xac, 0xd2, 0x38, 0x69, 0xaf, 0xf0, 0x66, 0x39, 0x91, 0xba, 0x83, 0x9f, 0x78, 0x0c, 0x51, 0xa1, 0xd5, 0xef, 0xb5, 0x17, 0x3f, 0x4e, 0x0e, 0x6c, 0xb3, 0xbc, 0x33, 0xe7, 0xc3, 0x48, 0xe6, 0xe0, 0x78, 0x95, 0x3f, 0x15, 0x5d, 0xcf, 0x2e, 0xe5, 0xdc, 0x9c, 0x5a, 0x05, 0x2b, 0x0b, 0xf2, 0xa2, 0xa4, 0x52, 0x57, 0x49, 0x1b, 0xf0, 0x0a, 0x5c, 0xc2, 0xaf, 0xa5, 0xcb, 0xc2, 0x50, 0x82, 0xad, 0xf6, 0xaa, 0xc9, 0x90, 0xf3, 0x12, 0x72, 0x64, 0x9a, 0xbe, 0x78, 0x7a, 0x96, 0x2d, 0x8e, 0x9b, 0xca, 0x4e, 0x07, 0x82, 0xbe, 0x76, 0xda, 0xd5, 0x14, 0x1e, 0x7b, 0x0a, 0xbf, 0xc3, 0x61, 0x77, 0x4e, 0x07, 0x1e, 0x45, 0x73, 0x8e, 0x90, 0x01, 0x14, 0xc7, 0x4f, 0xa7, 0x9f}
	// proof := bn254plonk.UnmarshalSolidity(ss, 3)
	// bPublicInputs := make([]*big.Int, 1)
	// for i := 0; i < 1; i++ {
	// 	bPublicInputs[i] = big.NewInt(0)
	// 	bPublicInputs[i].SetString("14617277935903348954511872008447373726184388595106564813070133963044622344216", 10)
	// }

	// one commitment input
	publicInputs := make(fr.Vector, 3)
	publicInputs[0].SetUint64(6)
	publicInputs[1].SetUint64(7)
	publicInputs[2].SetUint64(8)
	err = bn254plonk.Verify(&proof, &vk, publicInputs)
	checkError(err)

	bPublicInputs := make([]*big.Int, 3)
	for i := 0; i < 3; i++ {
		bPublicInputs[i] = big.NewInt(0)
		publicInputs[i].BigInt(bPublicInputs[i])
	}

	// vanilla plonk
	// publicInputs := make(fr.Vector, 1)
	// publicInputs[0].SetUint64(32)
	// err = bn254plonk.Verify(&proof, &vk, publicInputs)
	// checkError(err)

	// bPublicInputs := make([]*big.Int, 1)
	// for i := 0; i < 1; i++ {
	// 	bPublicInputs[i] = big.NewInt(0)
	// 	publicInputs[i].BigInt(bPublicInputs[i])
	// }

	// Interact with the contract -> when the function is not view
	auth, err = getTransactionOpts(privateKey, auth, client)
	checkError(err)

	_ = proof.MarshalSolidity()
	// _, err = instance.TestVerifierGo(auth, sproof, bPublicInputs)
	sproof := proof.MarshalSolidity()
	res, err := instance.Verify(nil, sproof, bPublicInputs)
	// _, err = instance.Verify(auth, sproof, bPublicInputs)
	// _, err = instance.TestVerifier(auth)
	checkError(err)
	client.Commit()
	fmt.Printf("%t\n", res)

	// query event
	query := ethereum.FilterQuery{
		FromBlock: big.NewInt(0),
		ToBlock:   big.NewInt(2),
		Addresses: []common.Address{
			contractAddress,
		},
	}

	logs, err := client.FilterLogs(context.Background(), query)
	checkError(err)

	contractABI, err := abi.JSON(strings.NewReader(string(contract.ContractABI)))
	checkError(err)

	for _, vLog := range logs {

		var event interface{}
		err = contractABI.UnpackIntoInterface(&event, "PrintUint256", vLog.Data)
		// err = contractABI.UnpackIntoInterface(&event, "PrintBool", vLog.Data)
		// err = contractABI.UnpackIntoInterface(&event, "PrintBytes32", vLog.Data)
		// err = contractABI.UnpackIntoInterface(&event, "PrintBytes", vLog.Data)
		checkError(err)
		fmt.Println(event)
	}

}
